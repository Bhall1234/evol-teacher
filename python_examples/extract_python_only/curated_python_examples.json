[
    {
        "instruction": "Write a Python function to calculate the factorial of a given number.",
        "output": "def factorial(number):\n    fact = 1\n    for i in range(1, number + 1):\n        fact = fact * i\n    return fact"
    },
    {
        "instruction": "Write a Python code to check if a given number is even or odd.",
        "output": "def is_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "How would you sort a list of integer numbers in descending order?",
        "output": "The list of integer numbers can be sorted in descending order using the Python's list sorting method: numbers.sort(reverse=True)."
    },
    {
        "instruction": "How would you convert a string to a float in Python?",
        "output": "The string can be converted to a float in Python by using the float() method: float(string)."
    },
    {
        "instruction": "What is the syntax for creating a custom exception in Python?",
        "output": "The syntax for creating a custom exception in Python is: class CustomException(Exception):."
    },
    {
        "instruction": "Create a for loop in Python to print out the items in the following list.\nlist = [\"apple\", \"banana\", \"cherry\", \"orange\"]",
        "output": "for item in list:\n  print(item)"
    },
    {
        "instruction": "Write a function in Python that takes two lists and returns a new list with elements of the first list followed by the second list.\nlist1 = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019]\nlist2 = [1, 2, 3]",
        "output": "def combine_lists(list1, list2):\n    return list1 + list2 \ncombine_lists(list1, list2)"
    },
    {
        "instruction": "Write a Python program to check if a given string contains any punctuation character or not.",
        "output": "import string\n\ndef is_punctuation(word):\n    for c in word:\n        if c in string.punctuation:\n            return True\n    return False"
    },
    {
        "instruction": "Create a function in Python with 2 input parameters a and b and return a string which contains their product.",
        "output": "def product_string(a, b):\n return \"The product of a and b is \" + str(a * b)"
    },
    {
        "instruction": "Rewrite the given code to define a function factorial in Python.\n# Factorial\n#n = 5\n#Product = 1\n#for x in range (1,n+1):\n#  Product = Product * x",
        "output": "def factorial(n):\n    product = 1\n    for x in range(1, n+1):\n        product = product * x\n    return product"
    },
    {
        "instruction": "Create a Python function to sort a string in descending order.",
        "output": "def Descending_Order(str1): \n\tstr1 = sorted(str1, reverse = True) \n\treturn ''.join(str1)"
    },
    {
        "instruction": "Create an object named \"Account\" in Python with two attributes: name and balance.",
        "output": "class Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance"
    },
    {
        "instruction": "Write a function for creating a dictionary in Python using the following logic.\nGiven data in the format {\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}",
        "output": "def createDictionary(data):\n    dict_data = {}\n    for key, value in data.items():\n        dict_data[key] = value\n \n    return dict_data"
    },
    {
        "instruction": "Write a piece of Python code to generate a random number between 1 and 10.",
        "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(random_number)"
    },
    {
        "instruction": "Write a Python code snippet to remove the vowels from a given string.\nGiven string=\"learningpython\"",
        "output": "def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"\") \n    return string\n\nstring = \"learningpython\"\nprint(removeVowels(string))\n\n// Output: lrngpythn"
    },
    {
        "instruction": "Write a Python class called Student which contains the following fields: name, age, and grade.",
        "output": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade"
    },
    {
        "instruction": "Write a Python function to print an n by n multiplication table.",
        "output": "def print_multiplication_table(n): \n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(i*j, end = ' ')\n   print()"
    },
    {
        "instruction": "Below is a piece of code in which task you need to make it compatible with Python 3.\nprint \"Hello World\"",
        "output": "print(\"Hello World\")"
    },
    {
        "instruction": "Write a python program to print the Odd numbers from the list.\nmy_list = [1,2,3,4,5,6,7,8,9]",
        "output": "for i in my_list:\n    if i % 2 == 1:\n        print(i)"
    },
    {
        "instruction": "Find the most frequent 5 words in a string\nString = \"Python is a high-level programming language.\"",
        "output": "def most_frequent_words(string):\n    words = string.split(' ')\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    sorted_words = sorted(word_freq.items(), key=lambda x:x[1], reverse=True)\n    return sorted_words[:5]"
    },
    {
        "instruction": "Explain what is a deque (double-ended queue) in Python.",
        "output": "A deque (short for \"double-ended queue\") is a data structure in Python that allows for the insertion and removal of data from either end of the structure. It is similar to a list but with the added benefit of allowing for elements to be added and removed from both the front and back of the structure giving it O(1) complexity for insertion and deletion compared to a list O(n) insertion and deletion. Deques are often used in applications where quickly inserting and removing elements from both ends of the data structure is necessary."
    },
    {
        "instruction": "Write a Python program to remove all adjacent duplicates from a string.\n\"aaabccddd\"",
        "output": "def remove_adjacent_duplicates(string):\n  result = ''\n  for c in string:\n    if result and result[-1] == c:\n      continue\n    result += c\n  return result"
    },
    {
        "instruction": "How can you run a Python script from the command line?",
        "output": "You can run a Python script from the command line by using the \"python\" command followed by the name of the Python file. The syntax would be \"python script_name.py\"."
    },
    {
        "instruction": "Sort the following items in numerical order using the bubble sort algorithm in Python.\narr = [2, 4, 1, 4, 6]",
        "output": "def bubbleSort(arr):\n n = len(arr)\n # Traverse through all array elements \n for i in range(n): \n\t# Last i elements are already in place \n\tfor j in range(0, n-i-1): \n\t\t# Traverse the array from 0 to n-i-1 \n\t\t# Swap if the element found is greater \n\t\t# than the next element \n\t\tif arr[j] > arr[j+1] : \n\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Driver code to test above \narr = [2, 4, 1, 4, 6]\nbubbleSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n\tprint (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Change the following Python code to find the mode of a list.\nlist_numbers = [2, 4, 2, 6, 4]",
        "output": "def mode_in_list(list_numbers): \n    count_dict = {} \n    for num in list_numbers: \n        if num in count_dict: \n            count_dict[num] += 1\n        else: \n            count_dict[num] = 1\n    max_count = 0\n    mode_num = 0\n    for num in list_numbers: \n        if count_dict[num] > max_count: \n            max_count = count_dict[num] \n            mode_num = num \n  \n    return mode_num \n\nlist_numbers = [2, 4, 2, 6, 4]\nmode_in_list(list_numbers) # Output: 2"
    },
    {
        "instruction": "Construct a program to convert a Celsius temperature to Fahrenheit temperature in Python.\ncelsius = 37.5",
        "output": "def celsius_to_fahrenheit(celsius):\nfahrenheit = 9/5*celsius + 32\nreturn fahrenheit\n\ncelsius = 37.5\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint('%.2f Celsius is equal to %.2f Fahrenheit' %(celsius, fahrenheit))"
    },
    {
        "instruction": "Write a Python function to count the number of words in a sentence.",
        "output": "def count_words(sentence):\n    # Split the sentence into a list of words\n    words = sentence.split()\n\n    # Return the length of the list\n    return len(words)\n\nsentence = \"This is a test sentence\"\nprint(\"The number of words in the sentence is \" + str(count_words(sentence)))\n\n# Output\nThe number of words in the sentence is 4"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers and returns the largest number in the list.\n[2, 4, 9, 17, 32]",
        "output": "def get_max(input_list):\n max_num = None\n for num in input_list:\n if max_num is None or num > max_num:\n max_num = num\n\n return max_num"
    },
    {
        "instruction": "Write a Python function that takes in a list of numbers and returns all numbers whose cube is greater than the number itself.\n[2, 3, 5, 7, 10]",
        "output": "def cube_greaterthan_self(nums):\n res = []\n for num in nums:\n if (num*num*num) > num:\n res.append(num)\n return res"
    },
    {
        "instruction": "Write a Python program to find the sum of all even numbers from 0 to n.\n10",
        "output": "def find_sum_even_numbers(n):\n sum = 0\n for i in range(2, n+1, 2):\n sum += i\n return sum"
    },
    {
        "instruction": "Explain when to use list comprehensions in Python.",
        "output": "List comprehensions are a concise and memory-efficient way of creating lists in Python. They can be used to create quickly new lists from existing ones by applying conditionals and other operations on the elements such as filtering and transforming. They are often used to filter existing lists based on conditions and also to modify each element of the list."
    },
    {
        "instruction": "Edit the given code of Python to remove unnecessary commas from the list.\nlist = [2, 3, 4, 5, 'hello', 6, 7]",
        "output": "list = [2, 3, 4, 5, 'hello', 6, 7]"
    },
    {
        "instruction": "Explain the differences between a while loop and a for loop in Python.",
        "output": "The main difference between a while loop and a for loop is that a while loop runs until a certain condition is met and a for loop runs over a sequence of items. While loops are typically used when the number of iterations is unknown, while for loops are used to iterate over a sequence of values such as a list or a range of numbers. While loops can also be used when there is a need to perform a set of operations until the condition is broken."
    },
    {
        "instruction": "Create a Python program to find the sum of first 10 natural numbers.",
        "output": "# Sum of first 10 natural numbers\n\ndef sum_natural_numbers(n):\n    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total\n\nsum_natural_numbers(10) # Output: 55"
    },
    {
        "instruction": "Rewrite this SQL query in Python.\nSELECT * from Movie WHERE Rating > 8.0",
        "output": "import sqlite3\n\nconnection = sqlite3.connect(\"database.db\")\ncursor = connection.cursor()\n\ncursor.execute(\"SELECT * from Movie WHERE Rating > 8.0\")\n\nresult = cursor.fetchall()\n\nfor i in result:\n    print(i)"
    },
    {
        "instruction": "What is the correct syntax to return the last character of a string in Python?",
        "output": "The correct syntax to return the last character of a string in Python is string[-1]."
    },
    {
        "instruction": "Write an Python code to remove the duplicate characters in a given string.\nString : \u201dHello World!\"",
        "output": "def remove_duplicate_chars(string):\n    result = \"\" \n    for char in string: \n        if char not in result: \n            result += char \n    return result\n\nprint(remove_duplicate_chars(\"Hello World!\"))\n// Output: Helo Wrd!"
    },
    {
        "instruction": "Create a Python program to find the greatest common divisor (GCD) of two given numbers.\nNumber 1: 20\nNumber 2: 40",
        "output": "def gcd(a, b): \n  \n    if (b == 0): \n        return a \n    return gcd(b, a % b) \n  \na = 20\nb = 40\nprint(\"GCD of\", a, \"and\", b, \"is\", gcd(a, b)) \n\n// Output: GCD of 20 and 40 is 20"
    },
    {
        "instruction": "Create a function in Python which takes a number as an input and returns the factorial of that number.",
        "output": "def factorial(n):\n  if n == 0 or n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)"
    },
    {
        "instruction": "Write a Python code to find the most common element in a given list.",
        "output": "def find_most_common_element(lst): \n  u = [] \n  max_occurrence = 1\n  element = None\n  \n  for x in lst: \n    if x not in u: \n      u.append(x) \n    else: \n      c = lst.count(x) \n      if c > max_occurrence: \n        max_occurrence = c \n        element = x \n      elif c == max_occurrence: \n        element = f'{x} and {element}'\n  \n  return element"
    },
    {
        "instruction": "Create a dataframe object in Python containing 5 rows and 3 columns.",
        "output": "import pandas as pd\n\ndf = pd.DataFrame(columns=['Column1', 'Column2', 'Column3'], \n                   data=[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10 ,11 ,12], [13, 14, 15]]\n                )"
    },
    {
        "instruction": "Create a Python class to find the maximum and minimum of two integers.",
        "output": "class MinMax:\n    \n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n    \n    def get_max(self):\n        return max(self.num1, self.num2)\n    \n    def get_min(self):\n        return min(self.num1, self.num2)"
    },
    {
        "instruction": "Write a Python code to print \"Hello World\" 5 times.",
        "output": "for i in range(5):\n    print(\"Hello World\")"
    },
    {
        "instruction": "Generate a function in Python that takes a single argument, \u2018a\u2019, and returns the square of 'a'.",
        "output": "def square(a):\n    return a**2"
    },
    {
        "instruction": "Write a Python statement to print the string \u201cGPT is awesome\u201d to the console.",
        "output": "print(\"GPT is awesome\")"
    },
    {
        "instruction": "How can you check if two strings are equal in Python?",
        "output": "Strings can be compared for equality in Python using the '==' operator, so if str1 == str2 evaluates to True, then the strings are equal."
    },
    {
        "instruction": "Create a for loop in Python that will traverse a list of numbers and print the index of each item.",
        "output": "for i in range(len(list)):\n    print(list[i], i)"
    },
    {
        "instruction": "How can you select all the elements from a list in Python?",
        "output": "All elements from a list in Python can be selected using the slicing operator [:], so if lst is a list, lst[:] returns the same list."
    },
    {
        "instruction": "Write a Python statement to find the index of the string \u201cGPT\u201d in the list.\nlist = [\"GPT\", \"is\", \"awesome\"]",
        "output": "list.index(\"GPT\") # returns 0"
    },
    {
        "instruction": "Edit the Python code to print the converted amounts in USD.\ndef convert_currency(amount):\n    output = amount * 1.20\n    print(output)\n\nconvert_currency(15)",
        "output": "def convert_currency(amount):\n    output = amount * 1.20\n    print(f'{output:.2f} USD')\n\nconvert_currency(15)"
    },
    {
        "instruction": "Create a class in python that defines and tracks an employees pay",
        "output": "class Employee:\n    def __init__(self, name, rate, hours):\n        self.name = name\n        self.rate = rate\n        self.hours = hours\n        \n    def pay(self):\n        return self.rate * self.hours"
    },
    {
        "instruction": "Rewrite the following code snippet in Python.\nint num1 = 5;\nint num2 = 6;\nint sum = num1 + num2;",
        "output": "num1 = 5\nnum2 = 6\nsum = num1 + num2"
    },
    {
        "instruction": "Complete the code snippet to add two lists together in Python.\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n#Code to add list1 to list2",
        "output": "list1 = [1,2,3]\nlist2 = [4,5,6]\n#Code to add list1 to list2\nnew_list = list1 + list2"
    },
    {
        "instruction": "Edit the following code to make it run with Python 3.\nimport sys\n\n# print \"Hello World\"",
        "output": "import sys\n\n# print \"Hello World\"\nprint(\"Hello World\")"
    },
    {
        "instruction": "Create a Python function that takes two integers as input and returns the maximum of the two.\na = 4 \nb = 8",
        "output": "def max_number(a, b):\n  if a > b:\n    return a\n  else:\n    return b"
    },
    {
        "instruction": "Using Python, write a program to print out all prime numbers up to a given number, n.\nn = 10",
        "output": "def prime_nums(n):\n  for num in range(2,n+1):\n    for i in range(2,num):\n      if (num % i == 0):\n        break\n    else:\n      print(num)\n\nprime_nums(10)"
    },
    {
        "instruction": "Construct a for loop in Python that iterates over 0 to 10 and prints the square of each element.",
        "output": "for i in range(0, 11):\n    print(i**2)"
    },
    {
        "instruction": "Parse the command line argument correctly in Python.\nCommand Line Argument: --name Anna --age 20",
        "output": "import argparse\n \nparser = argparse.ArgumentParser()\n\nparser.add_argument('--name',required=True)\nparser.add_argument('--age', required=True)\n\nargs = parser.parse_args()\n \nname = args.name\nage = args.age\n\nprint('Name : ', name)\nprint('Age : ', age)"
    },
    {
        "instruction": "How to parse XML in Python?",
        "output": "Python offers a variety of libraries and modules to parse XML information. One of the most popular libraries used today is the lxml library. This library provides a very simple API for parsing XML documents. To parse an XML file, you will first need to import the lxml library and the ElementTree API. Once imported, you can create a tree structure for the document and use the API to access each element of the tree. Once accessed, you can access the content of the XML element and use further Python native functions to manipulate the content."
    },
    {
        "instruction": "Write a Python script for generating a random password.",
        "output": "import string\nimport random\n\ndef gen_password(length):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(length))\n    return password\n\nlength = int(input(\"Enter the length of the password: \"))\nprint(gen_password(length))"
    },
    {
        "instruction": "How to debug a Python script?",
        "output": "Debugging a Python script requires the use of a debugger. The debugger allows one to step through the code line by line and inspect values of variables and other data. Python offers a variety of debuggers, both built-in and third-party. The most commonly used built-in debuggers include the pdb module, ipdb module, and pp module. Third-party debuggers such as pudb and pydbg are also available."
    },
    {
        "instruction": "Create a class called 'Person' in Python",
        "output": "class Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def set_age(self, age: int):\n        self.age = age\n\n    def get_age(self):\n        return self.age"
    },
    {
        "instruction": "What is an 'iterator' in Python",
        "output": "An iterator is an object that allows a program to traverse through all the elements of a collection, regardless of its specific implementation. In Python, iterators are objects that implement the iterator protocol, which consists of the methods __iter__() and __next__(). The __iter__() method returns an iterator from the behind the scenes iteration, and the __next__() method returns the next item from a sequence."
    },
    {
        "instruction": "Create a for loop in Python to output the cumulative sum of numbers from 1 to 5",
        "output": "result = 0\nfor i in range(1, 6):\n    result = result + i\n    print(result)"
    },
    {
        "instruction": "Write a function 'fibonacci_num' in Python to find the nth number in the Fibonacci Sequence",
        "output": "def fibonacci_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_num(n-1) + fibonacci_num(n-2)"
    },
    {
        "instruction": "How would you create a set in Python?",
        "output": "A set can be created with the set() method, or with a pair of curly braces. For example:\n\nmy_set = set([1,2,3])\n# or\nmy_set = {1,2,3}"
    },
    {
        "instruction": "What is the purpose of a try/except block in Python?",
        "output": "The purpose of a try/except block is to handle errors that may occur while a program is running. The try portion of the block contains the code that is susceptible to errors, while the except portion contains the code that will be executed if an error occurs."
    },
    {
        "instruction": "What are the arguments of the print() function in Python?",
        "output": "The print() function typically takes two arguments: the object to be printed and the optional keyword argument 'end', which specifies the character(s) to be printed at the end of the output."
    },
    {
        "instruction": "Create a dictionary in Python to store the phone numbers of your family members",
        "output": "family_phone_numbers = {\n    'Mother' : 123456789,\n    'Father' : 987654321,\n    'Sister' : 985236741,\n    'Brother' : 642087513\n}"
    },
    {
        "instruction": "Write a Python code to print the numbers from 0 to 10 except the numbers 3 and 7.",
        "output": "for i in range(11):\n    if i != 3 and i != 7:\n        print(i)"
    },
    {
        "instruction": "Write a code segment to generate a python list containing the first 5 even numbers.",
        "output": "even_nums = [x for x in range(0, 10) if x % 2 == 0][:5]\n\nprint(even_nums) # Outputs [0, 2, 4, 6, 8]"
    },
    {
        "instruction": "Create a Python code segment to calculate the area of a given circle.\nradius = 5",
        "output": "def area_of_circle(r):\n    return 3.14 * r**2\n \nprint(area_of_circle(5)) # Outputs 78.5"
    },
    {
        "instruction": "Create a Python function to calculate the Euclidean distance between two points.",
        "output": "def euclidean_distance(point1, point2): \n   sum_of_squares = 0\n   for i in range(len(point1)): \n      sum_of_squares += (point1[i] - point2[i])**2\n   return sum_of_squares**0.5"
    },
    {
        "instruction": "Create a Python dictionary with 3 elements.",
        "output": "my_dict = {\n 'name': 'John',\n 'age': 25,\n 'city': 'London'\n}"
    },
    {
        "instruction": "Create a function in Python to calculate the area of triangle given the base and height as parameters\nbase=10\nheight=5",
        "output": "def get_triangle_area(base, height):\n    return 0.5 * base * height"
    },
    {
        "instruction": "Write a Python program to find the sum of digits of a number.\nnumber = 2345",
        "output": "def sum_of_digits(number):\n    sum = 0\n    while (number != 0):\n        sum += number % 10\n        number //= 10\n    return sum"
    },
    {
        "instruction": "Design an algorithm in Python to sort an array using bubble sort.",
        "output": "def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr"
    },
    {
        "instruction": "Create a for-loop in Python.",
        "output": "for i in range(10): \n    print(i)"
    },
    {
        "instruction": "Construct a loop in Python to display all elements in a list.\nmylist = [5, 2, 4, 7, 3]",
        "output": "for element in mylist:\n    print(element)"
    },
    {
        "instruction": "Create a function in Python to count the number of digits in a given number.",
        "output": "def count_digits(n):\n    count = 0\n    while n != 0:\n        count += 1\n        n = n//10\n    return count"
    },
    {
        "instruction": "Create a function in Python to remove duplicates from a list.",
        "output": "def remove_duplicates(lst): \n    new_list = [] \n    for i in lst: \n        if i not in new_list: \n            new_list.append(i) \n    return new_list"
    },
    {
        "instruction": "Create a function in Python to test if a number is prime.",
        "output": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(float(n) ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "instruction": "Construct a loop in Python to print all the odd numbers from a given list.\nmylist = [1, 2, 3, 4, 5]",
        "output": "for num in mylist:\n    if num % 2 != 0:\n        print(num)"
    },
    {
        "instruction": "Convert the following C code to Python.\nint main()\n{\n    int i;\n    int n = 10;\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", i + 1);\n    }\n    return 0;\n}",
        "output": "def main():\n    n = 10\n    for i in range(n):\n        print(i + 1)\n    return 0"
    },
    {
        "instruction": "Is there a way to run a function after a delay in Python?",
        "output": "Yes, you can use the ``time.sleep()`` function to delay the execution of a function for a specified amount of time. For example, you can use it as follows: \n\nimport time\n\ndef delay_func():\n    print('Function is running')\n\ntime.sleep(1)\ndelay_func()"
    },
    {
        "instruction": "Explain the following code.\ndef order_list(list):\n    sorted_list = sorted(list)\n    return sorted_list",
        "output": "The ``order_list()`` function takes a list as input and returns a sorted version of the list. It uses the built-in Python ``sorted()`` method which sorts the list in-place and returns a new list."
    },
    {
        "instruction": "Write a function in Python that takes two numbers and returns the greater one",
        "output": "def max_number(a,b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "instruction": "Create an array of seven random integers between 1 and 10 in Python.",
        "output": "import random\n\narr = [random.randint(1,10) for ele in range(7)]\nprint(arr)"
    },
    {
        "instruction": "Create a Python function to identify the most frequent element in a list.\nmy_list = [2, 3, 3, 4, 5, 4, 4]",
        "output": "def findMostFreqElement(my_list):\n    freqs = {}\n    for item in my_list:\n        if item in freqs.keys():\n            freqs[item] += 1\n        else:\n            freqs[item] = 1\n    max_value = 0\n    max_key = None\n    for key, value in freqs.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return max_key"
    },
    {
        "instruction": "Write a Python function to remove all the given characters from the list of elements.\nmy_list = [1, 2, 3, 4, 5], chars = [2, 3, 4]",
        "output": "def removeChars(my_list, chars):\n    res = [] \n    for element in my_list:\n        if element not in chars: \n            res.append(element)  \n    return res"
    },
    {
        "instruction": "Write a function in Python for selecting the largest prime number found in a given array of numbers.\nnumbersArray = [21, 13, 25, 37, 49, 55]",
        "output": "def largestPrime(numbersArray):\n    largestPrime = 0\n    \n    for number in numbersArray:\n        if number > 1:\n            isPrime = True\n            for i in range(2, number): \n                if (number % i == 0):\n                    isPrime = False\n                    break\n            if isPrime:\n                if number > largestPrime:\n                    largestPrime = number\n    \n    return largestPrime"
    },
    {
        "instruction": "Sort an array in descending order using Python.\nnumbersArray = [24, 7, 88, 46, 17, 39]",
        "output": "def descendingSort(numbersArray): \n    for i in range(len(numbersArray)-1, 0, -1):\n         for j in range(i):\n            if numbersArray[j] < numbersArray[j+1] :\n                temp = numbersArray[j]\n                numbersArray[j] = numbersArray[j+1]\n                numbersArray[j+1] = temp\n    return numbersArray"
    },
    {
        "instruction": "Write a function in Python for calculating the mean Absolute Error between two given arrays.\narray1 = [12, 14, 69, -20, 20]\narray2 = [4, 8, 66, -11, 25]",
        "output": "def meanAbsError(array1, array2):\n\terror = 0\n\tfor i in range(len(array1)):\n\t\terror += abs(array1[i] - array2[i])\n\treturn error/len(array1)"
    },
    {
        "instruction": "Define a Python function that calculates the area of a circle.",
        "output": "def calculate_circle_area(radius):\n  PI = 3.14\n  area = PI * radius**2\n  return area;"
    },
    {
        "instruction": "Using the list as input, create a Python set object.\nlist = [1, 2, 3, 4]",
        "output": "list = [1, 2, 3, 4]\nmy_set = set(list)\nprint(my_set) # {1, 2, 3, 4}"
    },
    {
        "instruction": "Edit the following Python code to get the sum of all elements in an array.\narray = [1, 2, 3, 4]",
        "output": "total = 0\nfor element in array:\n  total += element\nprint(total)"
    },
    {
        "instruction": "Calculate the cross product of two vectors in Python.\nu = [2,4,6]\nv = [1,2,3]",
        "output": "def cross_product(u, v):\n    cross = [u[1]*v[2] - u[2]*v[1], u[2]*v[0] - u[0]*v[2], u[0]*v[1] - u[1]*v[0]]\n    return cross"
    },
    {
        "instruction": "Create a Python dictionary that contains information about your favorite movie.",
        "output": "my_favorite_movie = {\n    \"title\": \"The Godfather\",\n    \"director\": \"Francis Ford Coppola\",\n    \"year\": 1972,\n    \"stars\": [\"Marlon Brando\", \"Al Pacino\", \"Diane Keaton\"]\n}"
    },
    {
        "instruction": "Output all the prime numbers between 1 and 100, including 100, in Python.",
        "output": "for n in range(2, 101):\n    for x in range(2, n):\n        if n % x == 0:\n            break\n    else:\n        print(n)"
    },
    {
        "instruction": "Generate code to create a dictionary in Python.",
        "output": "my_dict = {}\nfor key, value in iterable_object:\n    my_dict[key] = value"
    },
    {
        "instruction": "Reformat the following code from python to java.\nfor word in words:\n    word = word.lower()",
        "output": "for (String word : words) {\n    word = word.toLowerCase();\n}"
    },
    {
        "instruction": "Describe how memory management works in Python",
        "output": "Python uses a private heap space for memory management in which all the objects and data are stored. The private heap is used to cater the exclusive needs of the interpreter. This memory space can not be directly accessed by the programmer, instead, the interpreter provides objects and APIs to access the heap. The heap manages the memory internally by pre-allocating certain blocks to accommodate different objects that are created during runtime. It might request the operating system to increase the size of the private heap space if it runs out of memory."
    },
    {
        "instruction": "Generate a python function which takes a list as input and returns a shuffled version or the list.",
        "output": "import random\n\ndef shuffle_list(input_list):\n    newList = input_list.copy()\n    random.shuffle(newList) \n    return newList"
    },
    {
        "instruction": "Categorize the following task into one of the following: classification, retrieval, generation, or editing.\nReformat the following code from python to java",
        "output": "Editing"
    },
    {
        "instruction": "Generate a function in Python which takes in two lists and returns a list of elements which are present in both the lists.",
        "output": "def intersection_list(list_1, list_2):\n    return [el for el in list_1 if el in list_2]"
    },
    {
        "instruction": "Suggest a python function which takes a number and prints the numbers in increasing order up to that number",
        "output": "def print_numbers(num):\n    for i in range(1,num+1):\n        print(i)"
    },
    {
        "instruction": "Write a function in Python that returns True if the input is a prime number and False otherwise.\ninput = 18",
        "output": "def is_prime(input): \n    for num in range(2, input): \n        if input % num == 0: \n            return False\n    return True"
    },
    {
        "instruction": "Create a web scraper using Python to extract the title of all webpages from the given website.\nwebsite = 'www.example.com'",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML of the website\nresponse = requests.get(website)\nhtml = response.text\n\n# Initialize the Beautiful Soup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract the title of all webpages\ntitles = []\nfor page in soup.find_all('a'):\n    titles.append(page.text)\n\nprint(titles)"
    },
    {
        "instruction": "Write a function in Python to calculate the median of an array of numbers.\n[7, 12, 5, 18, 2, 9]",
        "output": "def calculate_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n    else:\n        return arr[len(arr) // 2]"
    },
    {
        "instruction": "Write a snippet of Python code that prints a formatted string of the following sentence: \"Hello, I am a coder.\"",
        "output": "print(\"Hello, I am a coder.\")"
    },
    {
        "instruction": "Write a command line script in Python to take a string as input and convert it to upper case.",
        "output": "# Import the library\nimport sys\n\n# Take string as input\ninput_string = sys.argv[1]\n\n# Print the upper case string\nprint(input_string.upper())"
    },
    {
        "instruction": "Describe what an algorithm is",
        "output": "An algorithm is a set of instructions or steps for the purpose of solving a problem or achieving a desired result. It can be written in any language, for example, a programming language such as Python or Java, and its steps can range from performing mathematical computations to manipulating data or resources. Algorithms are used in various fields, such as science and engineering."
    },
    {
        "instruction": "Rewrite the following Python code to use while loop\nfor i in range(5):\n    print(i)",
        "output": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Create a Python program to print the first n Fibonacci numbers",
        "output": "def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(a)\n        a, b = b, a + b"
    },
    {
        "instruction": "Create a program in Python to convert Celsius to Fahrenheit.\n100 Celsius",
        "output": "def celsius_to_fahrenheit(celsius): \n  fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit\n\nfahrenheit = celsius_to_fahrenheit(100)\nprint(\"100 Celsius is {0} Fahrenheit\".format(fahrenheit))  # Output: \"100 Celsius is 212 Fahrenheit\""
    },
    {
        "instruction": "Convert the following Python algorithm to C++.\n\ndef sum_list(list_nums):\n    result = 0\n    for num in list_nums:\n        result += num\n    return result",
        "output": "// C++ Function to calculate sum of a list of numbers \nint sum_list(vector<int>& list_nums) \n{ \n    int result = 0; \n    for (int num : list_nums) \n        result += num; \n    return result; \n}"
    },
    {
        "instruction": "Invert a Python dictionary using a for loop.\nd = {'a': 1, 'b': 2, 'c': 3}",
        "output": "inverted_d = {}\n\nfor key, value in d.items():\n    inverted_d[value] = key\n\nprint(inverted_d) # Output: {1: 'a', 2: 'b', 3: 'c'}"
    },
    {
        "instruction": "Suggest a way to convert the following JSON string to a dictionary in Python.\njson_str = \"{\\\"name\\\":\\\"Jackie\\\",\\\"age\\\":25}\"",
        "output": "import json\n\ndict_data = json.loads(json_str)\n\nprint(dict_data) # Output: {'name': 'Jackie', 'age': 25}"
    },
    {
        "instruction": "Design a Python function that accepts a list of numbers and returns the product of those numbers.",
        "output": "def get_product(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product"
    },
    {
        "instruction": "Write a Python code to create a list of squares of all the even numbers between 0 and 50.",
        "output": "squares = [ num * num for num in range(0, 51) if num % 2 == 0]"
    },
    {
        "instruction": "Suggest a way to sort a list of strings in Python alphabetically, from Z to A.\nwords = [\"Apple\", \"Banana\", \"Orange\"]",
        "output": "sorted_words = sorted(words, reverse=True)"
    },
    {
        "instruction": "Create a short Python code that prints out the first 3 characters of every item in a given list.\nwords = [\"Apple\", \"Banana\", \"Orange\"]",
        "output": "for word in words:\n    print(word[:3])"
    },
    {
        "instruction": "In the following list of strings, create a Python code to find out the longest word.\nwords = [\"Apple\", \"Banana\", \"Orange\"]",
        "output": "longest_word = max(words, key=len)\nprint(longest_word) # Output: \"Banana\""
    },
    {
        "instruction": "Create a Python class which has two methods add() and subtract() which take two integers as inputs and perform respective operations.",
        "output": "class Calculator:\n    def add(self, a, b):\n        return a+b\n    \n    def subtract(self, a, b):\n        return a-b"
    },
    {
        "instruction": "Use Python to write a program to find the factor of numbers between 3 and 10",
        "output": "def find_factors(num):\n    factors = []\n    for i in range(3,num+1):\n        if num % i == 0:\n            factors.append(i) \n    return factors\n\nprint(find_factors(10))"
    },
    {
        "instruction": "Create a function in Python that returns the result of a Boolean operation.",
        "output": "def boolean_operation(X, Y, operation):\n    \"\"\"\n    Returns the result of a Boolean operation on two given values.\n    \n    Parameters:\n    X (boolean): The first argument.\n    Y (boolean): The second argument.\n    operation (string): The boolean operation to perform\n        - \"OR\": Returns true if either X or Y is true.\n        - \"AND\": Returns true if both X and Y are true.\n        - \"XOR\": Returns true if either X or Y is true, but not both.\n        \n    Returns:\n    boolean: The result of the Boolean operation.\n    \"\"\"\n    if operation == \"OR\":\n        return X or Y\n    elif operation == \"AND\":\n        return X and Y\n    elif operation == \"XOR\":\n        return (X or Y) and not (X and Y)\n    else:\n        return False"
    },
    {
        "instruction": "Create a Python function to generate a random number, between two given numbers.",
        "output": "def random_number(lower_bound, upper_bound):\n    \"\"\"\n    Generates a random number between two given numbers.\n    \n    Parameters:\n    lower_bound (int): The lower bound of the number range.\n    upper_bound (int): The upper bound of the number range.\n    \n    Returns:\n    int: A random number between the two given numbers.\n    \"\"\"\n    import random\n    return random.randint(lower_bound, upper_bound)"
    },
    {
        "instruction": "Create a function in Python to print all the odd numbers between 1 and n (inclusive).",
        "output": "def print_odd_numbers(n):\n    \"\"\"Prints all the odd numbers between 1 and n (inclusive).\"\"\"\n    for i in range(1, n + 1):\n        if i % 2 != 0: # odd number\n            print(i)"
    },
    {
        "instruction": "Wrap this mathematical expression as a Python function.\n(* (sqrt 4) (+ 10 5))",
        "output": "def expression(x, y):\n    \"\"\"\n    Evaluates a mathematical expression.\n    \n    Parameters:\n    x (int): The first argument.\n    y (int): The second argument.\n    \n    Returns:\n    int: The result of the expression.\n    \"\"\"\n    import math\n    return math.sqrt(x) + (y * y)"
    },
    {
        "instruction": "Create a Python program to print out a list of all odd numbers from 10 to 45.",
        "output": "odd_numbers = []\nfor n in range(10, 46):\n    if n % 2 != 0:\n        odd_numbers.append(n)\nprint(odd_numbers)"
    },
    {
        "instruction": "Create a Python class that represents a hotel with an array of rooms, each with an occupancy status.",
        "output": "class Hotel:\n    def __init__(self, name, num_rooms):\n        self.name = name\n        self.num_rooms = num_rooms\n        self.rooms = []\n        for _ in range(num_rooms):\n            self.rooms.append('unoccupied')\n    \n    def check_in(self, room_number):\n        if self.rooms[room_number - 1] == 'unoccupied':\n            self.rooms[room_number - 1] = 'occupied'\n            return True\n        else:\n            return False"
    },
    {
        "instruction": "Edit this Python code to include a loop, then print out each item in the list.\nlist = [1,2,3]",
        "output": "list = [1,2,3]\n\nfor item in list:\n print(item)  // Prints \"1 2 3\" in the console."
    },
    {
        "instruction": "Write a function in Python to calculate the sum of all the digits of a given integer.\nnum = 123",
        "output": "def sum_digits(num):\n  sum = 0\n  while (num > 0):\n    sum += num % 10\n    num = num // 10\n  return sum\n\nprint(sum_digits(123))  // Outputs 6"
    },
    {
        "instruction": "Create a function in Python to convert a given number to its equivalent binary number.\nnum = 11",
        "output": "def binary(num):\n    return bin(num)[2:]\n\n#Function call\nprint(binary(num))\n\n#Output\n1011"
    },
    {
        "instruction": "Create a program in Python to find the length of a given string.\nstring = \"Hello World!\"",
        "output": "# function to find the length of a string\ndef findLength(string):\n    count = 0\n    \n    for i in string: \n        count += 1\n    \n    return count \n\n# Driver code  \nstring = \"Hello World!\"\n\nlength = findLength(string) \n\nprint(\"Length of the given string is:\", length)\n\n# Output\nLength of the given string is: 12"
    },
    {
        "instruction": "Explain the use of classes in Python",
        "output": "Classes in Python are used to bundle data and functionality together. A class serves as a template for creating objects which contain its properties and methods. This allows for code reusability and makes it easier to manage and maintain the code. Classes also represent real world objects, allowing us to build a better link between our code and the real world."
    },
    {
        "instruction": "How can you achieve python virtual environment?",
        "output": "Python virtual environments allow you to have isolated Python setups for different projects or scripts. They allow you to have separate versions of various packages installed for different projects and to switch between them easily. To set up a virtual environment, you can use the Python package manager `pip`. From the command line, you can create a new virtual environment with `pip install virtualenv`, activate it with `source <env_name>/bin/activate` and deactivate it with `deactivate`."
    },
    {
        "instruction": "Create a function in Python that accepts an array of integers and returns an array of the median values.",
        "output": "def median_array(array):\n      sorted_arr = sorted(array)\n      n = len(sorted_arr)\n      \n      if n % 2 == 1:\n          return sorted_arr[int(n / 2)]\n      else:\n          return (sorted_arr[int(n / 2) - 1] + sorted_arr[int(n / 2)]) / 2"
    },
    {
        "instruction": "Build a function giving the factorial of a given number using Python.",
        "output": "def factorial(n): \n   if (n == 0): \n      return 1\n   else:\n      return n * factorial(n-1)"
    },
    {
        "instruction": "Write a code snippet to display the current time in Python.",
        "output": "import time \nprint(time.strftime(\"%H:%M:%S\"))"
    },
    {
        "instruction": "Reverse the contents of a string in Python.\nmessage = \"Hello World\"",
        "output": "def reverse_string(str):\n res = ''\n for character in str:\n res = character + res\n return res\n\nreverse_string(message)"
    },
    {
        "instruction": "Describe a problem you solved using Python programming.\nI recently had to reformat data collected from a survey into a more readable format.",
        "output": "Recently, I needed to reformat data collected from a survey into a more readable format. I used Python programming to automate the process by splitting the lines of data into their corresponding columns, removing any duplicates, and performing calculations on the numerical data. I then used the Python's Pandas module to export the data as a csv file which made it easy to view in spreadsheet software."
    },
    {
        "instruction": "Create a function using Python that takes two arguments and returns the product.",
        "output": "def multiply(x, y):\n    return x * y"
    },
    {
        "instruction": "What is web scraping?",
        "output": "Web scraping is the process of extracting data from websites. It is done with the help of programming language such as Python, Java, etc. It is used to automate the process of collecting data from web pages for analysis purposes."
    },
    {
        "instruction": "You need to convert the following JSON code into a List object in Python.\n{\n  \"employees\": [\n    {\n      \"name\": \"John Doe\",\n      \"age\": 30\n    },\n    {\n      \"name\": \"Jane Doe\",\n      \"age\": 28\n    },\n    {\n      \"name\": \"Joe Smith\",\n      \"age\": 25\n    }\n  ]\n}",
        "output": "[\n    {\n        \"name\": \"John Doe\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"age\": 28\n    },\n    {\n        \"name\": \"Joe Smith\",\n        \"age\": 25\n    }\n]"
    },
    {
        "instruction": "Generate a random integer between 1 to 6 using Python.",
        "output": "import random\nx = random.randint(1,6) \nprint(x) // Output: An Integer between 1 to 6"
    },
    {
        "instruction": "What is a tuple in Python?",
        "output": "A tuple is an immutable sequence of elements which can contain items of different data types. Tuples are like lists but are surrounded by parentheses instead of square brackets. Unlike lists, tuples are not mutable and their elements cannot be changed or removed once created."
    },
    {
        "instruction": "Develop a function in Python to find the maximum element in a given array.\narray = [10, 20, 4]",
        "output": "def find_max_element(arr):\n    max_element = arr[0]\n    \n    for num in arr:\n        if num > max_element:\n            max_element = num\n    \n    return max_element   \n\narr = [10, 20, 4]\nmax_element = find_max_element(arr)\n\nprint(max_element) # 20"
    },
    {
        "instruction": "Create a code in Python to check if a number is odd or even.\nn = 5",
        "output": "def is_odd_or_even(n):\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\nn = 5\nresult = is_odd_or_even(n)\nprint(result)    # odd"
    },
    {
        "instruction": "Generate a code in Python to convert inches to centimeters.\ninches = 10",
        "output": "def inches_to_centimeters(inches):\n    return inches * 2.54\n\ninches = 10\nresult = inches_to_centimeters(inches)\nprint(result)    # 25.4"
    },
    {
        "instruction": "Develop a code in Python to calculate the sum of diagonal elements of a matrix.\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def sum_diagonal(matrix):\n    sum = 0\n    \n    for i in range(len(matrix)):\n        sum = sum + matrix[i][i]\n    return sum\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nresult = sum_diagonal(matrix)\n\nprint(result) # 15"
    },
    {
        "instruction": "Create an API in Python that takes an integer n and return the nth Fibonacci number.",
        "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for _ in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b"
    },
    {
        "instruction": "Write a function in Python to convert both Fahrenheit and Celsius temperature to Kelvin.",
        "output": "def convert_temp(temp, unit='C'):\n    if unit == 'F':\n        temp = (temp - 32) * (5/9) + 273.15\n    elif unit == 'C':\n        temp = temp + 273.15\n    else:\n        print ('Invalid unit')\n    return temp"
    },
    {
        "instruction": "Generate a random 6-digit number in Python.",
        "output": "import random\n\nrandom_number = random.randint(100000, 999999)"
    },
    {
        "instruction": "Generate a python program to find out if a string is a palindrome or not.\nstring = \"racecar\"",
        "output": "def is_palindrome(string):\n    for i in range(len(string)//2):\n        if string[i] != string[len(string)-1-i]:\n            return False\n    return True"
    },
    {
        "instruction": "Find the frequency of a character in a given string.\nstring = \"Python\"\nchar = \"o\"",
        "output": "def count_occurrence(string, char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count"
    },
    {
        "instruction": "Write a Python program to find the longest palindromic substring in a given string.\nelobootjr",
        "output": "oot"
    },
    {
        "instruction": "Write a Python program to convert a given string to a list of characters.\ns = \"abcdef\"",
        "output": "list = list(s)\n\nprint(list)"
    },
    {
        "instruction": "Create a function in Python to extract the first element of a list.\n[1, 2, 3, 4, 5]",
        "output": "def first_element(list):\n  return list[0]"
    },
    {
        "instruction": "Write a simple Python program to calculate the time taken to make a given number of cupcakes.\nnumber of cupcakes = 13\nbaking time = 12 minutes",
        "output": "number_of_cupcakes = 13\nbaking_time = 12\n\ntotal_time = number_of_cupcakes * baking_time\n\nprint(\"Total time to make 13 cupcakes:\", total_time, \"minutes\")"
    },
    {
        "instruction": "Create a Python class called 'Vector3' that represents a 3-dimensional vector.",
        "output": "class Vector3:\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n\n    def __add__(self, other):\n        return Vector3(self.x + other.x, self.y + other.y, self.z + other.z)"
    },
    {
        "instruction": "Create and execute a python script to generate a fibonacci sequence of length 10.",
        "output": "def generate_fibonacci_sequence(length):\n  a, b = 0, 1\n  sequence = []\n  for _ in range(length):\n    a, b = b, a + b\n    sequence.append(a)\n  return sequence\n\nprint(generate_fibonacci_sequence(10))"
    },
    {
        "instruction": "Binary search is a technique for efficiently finding an element in a sorted array. Implement a binary search algorithm in Python.\narr = [2, 4, 7, 8, 10, 15, 20]\ntarget = 15",
        "output": "def binary_search(arr, target):\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right)//2\n        if target == arr[mid]:\n            return mid\n        elif target > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "instruction": "Define a Python function that takes two input lists of points and return the Euclidean distance between them.\npoint1 = [3, 4]\npoint2 = [10, 11]",
        "output": "def get_euclidean_distance(point1, point2):\n  return ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2) ** 0.5"
    },
    {
        "instruction": "What is the name of the module used in Python to serialize data?",
        "output": "The module used in Python to serialize data is called the pickle module."
    },
    {
        "instruction": "Write a Python loop to iterate over the following list and print every element.\nmy_list = [1, 2, 3, 4, 5]",
        "output": "for item in my_list:\n    print(item)"
    },
    {
        "instruction": "How can you print the length of a Python list?",
        "output": "The length of a Python list can be printed by using the built-in len() function. For example, \n\nmy_list = [1, 2, 3]\nprint(len(my_list)) \n\nwill output 3."
    },
    {
        "instruction": "Using Python, convert the string \"Hello World\" to uppercase.",
        "output": "print(\"Hello World\".upper()) # HELLO WORLD"
    },
    {
        "instruction": "In Python, how would you check if a given number is an even number?\n42",
        "output": "if (num % 2 == 0):\n    print(\"The given number is an even number\")\nelse:\n    print(\"The given number is an odd number\")"
    },
    {
        "instruction": "In Python, what is the function used to create a tuple?",
        "output": "tuple()"
    },
    {
        "instruction": "Write a Python function that takes two integers as argument and returns their product.",
        "output": "def product(x, y):\n    return x * y"
    },
    {
        "instruction": "Convert the following pseudocode into Python code.\nInput: a positive integer n\n\ntotal \u2190 0\nodd \u2190 1\n\nwhile odd \u2264 n\n    total \u2190 total + odd\n    odd \u2190 odd + 2\n\nOutput: total",
        "output": "def calculate_sum_of_odds_up_to(n):\n  total = 0\n  odd = 1\n  while odd <= n:\n    total += odd\n    odd += 2\n  return total"
    },
    {
        "instruction": "Implement a method in Python to find the maximum element of an array.\n[4, 2, 5, 3]",
        "output": "def find_max(array):\n    max_element = array[0]\n    for element in array:\n        if element > max_element:\n            max_element = element\n    return max_element"
    },
    {
        "instruction": "Generate a Python script that takes a list of integers and returns the unique elements of the list in the same order as they appear in the list.\n[3, 4, 2, 5, 6, 4, 2, 3]",
        "output": "def find_unique_elements(arr):\n    elements = []\n    for el in arr:\n        if el not in elements:\n            elements.append(el)\n    return elements"
    },
    {
        "instruction": "Implement a function in Python to check that a word is a palindrome.\n\"Anna\"",
        "output": "def is_palindrome(word):\n    x = 0\n    y = len(word) - 1\n    while x <= y:\n        if word[x] != word[y]:\n            return False\n        else:\n            x += 1\n            y -= 1\n    return True"
    },
    {
        "instruction": "Edit this Python function to reverse the elements in a list.\ndef reverse_list(list):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return new_list",
        "output": "def reverse_list(list):\n    new_list = []\n    for i in range(len(list)-1,-1,-1):\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "instruction": "Create a Python script to print all the prime numbers between 1 and a given number.\n30",
        "output": "def is_prime(n): \n    if (n <= 1): \n        return False \n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False \n    \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False \n        i = i + 6\n      \n    return True\n  \ndef print_primes(n):\n    for i in range(2,n+1):\n        if is_prime(i):\n            print(i, end = \" \")\n  \nprint_primes(30)"
    },
    {
        "instruction": "Generate Python code that finds all the possible combinations of items in a list.\n[1, 2, 3]",
        "output": "def find_combinations(arr):\n    if len(arr) == 0:\n        return [[]]\n    else:\n        ans = []\n        for i in range(len(arr)):\n            comb = [arr[i]]\n            rest = arr[:i] + arr[i+1:]\n            for sub_comb in find_combinations(rest):\n                combs = [comb + sub_comb]\n                ans += combs\n        return ans"
    },
    {
        "instruction": "Create a Python class to represent a circle object with its radius as a property.",
        "output": "class Circle(object):\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def get_radius(self):\n        return self.radius"
    },
    {
        "instruction": "Create an empty 2D array in Python with 4 columns and 3 rows.",
        "output": "arr = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"
    },
    {
        "instruction": "Write a function in Python to calculate the volume of a rectangular prism.\nlength = 10 cm, width = 4 cm, height = 4 cm",
        "output": "def volume(length, width, height):\n    return length * width * height\n\nvolume_result = volume(10, 4, 4) \nprint('Volume of a rectangular prism is:', volume_result)"
    },
    {
        "instruction": "Rewrite the given function in Python so that it uses recursion.\ndef add_numbers(n1, n2): \n    return n1+n2",
        "output": "def add_numbers(n1, n2): \n    if n2 == 0: \n        return n1 \n    return add_numbers(n1 + 1, n2 - 1)"
    },
    {
        "instruction": "Debug the following Python code to return a list of integers from 1 to 10.\ndef func():\n     lst = [1,2,3]\n     for i in range(3,10):\n        lst.append(i)\n     return lst",
        "output": "def func():\n     lst = []\n     for i in range(1,10):\n        lst.append(i)\n     return lst"
    },
    {
        "instruction": "Change the following code to a class in Python.\ndef inc_by_one(x):\n    return x + 1\n\ndef print_inc_by_one(x):\n    res = inc_by_one(x)\n    print(res)\n\nprint_inc_by_one(1)",
        "output": "class Operation:\n    def inc_by_one(self, x):\n        return x + 1\n    \n    def print_inc_by_one(self, x):\n        res = self.inc_by_one(x)\n        print(res)\n\noperation = Operation() \noperation.print_inc_by_one(1)"
    },
    {
        "instruction": "Compose a python program to remove whitespaces in a given string.\nthis is a test sentence",
        "output": "string = \"this is a test sentence\"\nstring = string.replace(\" \", \"\")\nprint(string)"
    },
    {
        "instruction": "Format the following code so that it conforms to Python's style guidelines.\nprint(\"Hello world\")",
        "output": "# Format the code\nprint(\"Hello world\")"
    },
    {
        "instruction": "Create a class in Python to calculate area and perimeter of a rectangle.",
        "output": "class Rectangle:\n    def __init__(self, length, breadth):\n        self.length = length\n        self.breadth = breadth\n\n    def calculate_area(self):\n        return self.length * self.breadth\n\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.breadth)"
    },
    {
        "instruction": "Write a python statement to create a dictionary.",
        "output": "dict1 = dict()"
    },
    {
        "instruction": "What is the difference between a function and a class in Python?",
        "output": "A function is a block of code that performs an action, while a class is a blueprint for objects with attributes and functions. A function is associated with a single task and does not maintain state, whereas a class is associated with multiple functions and data and stores information about an object's state."
    },
    {
        "instruction": "Write a Python code to print the sum of the first and last element in the given array.\narr = [2, 4, 5, 6, 7]",
        "output": "arr = [2, 4, 5, 6, 7]\n# Sum of the first and last element\nprint(arr[0] + arr[-1])\n\n## Output:\n9"
    },
    {
        "instruction": "Create a program to count the word occurrences in the given sentence.\nSentence = \"Tim is learning Python programming.\"",
        "output": "# Count Word Occurrences\nSentence = \"Tim is learning Python programming.\"\n\nword_occurrences = dict() \nfor word in Sentence.split(): \n    if word not in word_occurrences: \n        word_occurrences[word] = 1\n    else: \n        word_occurrences[word] += 1\n\n# Output \nprint(word_occurrences) \n\n## Output:\n{'Tim': 1, 'is': 1, 'learning': 1, 'Python': 1, 'programming.': 1}"
    },
    {
        "instruction": "Write a loop in Python that iterates over the array and prints out each element of the array.\n[2, 6, 8, 10]",
        "output": "for item in [2, 6, 8, 10]:\n    print(item)"
    },
    {
        "instruction": "How can you count the number of different characters in a string?",
        "output": "To count the number of different characters in a string, you can use a dictionary to keep track of the count of each character. You can iterate over the string to check if each character is in the dictionary, and if it is, then increase its count. If the character isn't in the dictionary, then add it and set its count to 1. At the end of the iteration, the number of different characters in the string will be the size of the dictionary.\n// Python\n\ndef countDifferentCharacters(string):\n   # Create an empty dictionary \n   myDict = dict()\n   \n   # Iterate over the string \n   for ch in string:\n       # If the character is in the string\n       if ch in myDict:\n           myDict[ch] += 1\n       else:\n           myDict[ch] = 1\n   return len(myDict)"
    },
    {
        "instruction": "Write a function in Python which takes in a string and removes all punctuation marks.\nstring = \"Hello, there! How are you?\"",
        "output": "def remove_punctuation(string):\n    # list of punctuations to be removed\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\n    # iterate through the string, checking each char\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    \n    return no_punct\n\nstring = \"Hello, there! How are you?\"\nprint(remove_punctuation(string))"
    },
    {
        "instruction": "Create a script in Python that prints out the Fibonacci series up to the nth term.\nn = 8",
        "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \n# Driver Program \nprint(Fibonacci(8))"
    },
    {
        "instruction": "Test the following Python code for syntax errors and explain how you fixed them.\ndef add two numbers a and b\n return a+b",
        "output": "Error: There should be a space between the words \u2018add\u2019 and \u2018two\u2019.\nFixed:\ndef add_two_numbers(a, b): \n return a+b"
    },
    {
        "instruction": "Write a Python program to create a list containing the squares of numbers from 1 to 10.",
        "output": "squares = [i**2 for i in range(1,11)]"
    },
    {
        "instruction": "Use the requirements to write a Python code to sort an array of integers.\n[5, 10, 2, 1, 7]",
        "output": "arr = [5, 10, 2, 1, 7] \n  \narr.sort() \n  \nprint(arr)"
    },
    {
        "instruction": "Construct a class in Python to represent a complex number.",
        "output": "class Complex:\n    def __init__(self, re, im):\n        self.re = re\n        self.im = im\n\n    def __str__(self):\n        return '{} + {}i'.format(self.re, self.im)"
    },
    {
        "instruction": "Create an object-oriented class in Python to represent a coin (with members of denomination and value).",
        "output": "class Coin:\n    def __init__(self, denomination, value):\n        self.denomination = denomination\n        self.value = value\n        \n    def getDenomination(self):\n        return self.denomination\n    \n    def getValue(self):\n        return self.value"
    },
    {
        "instruction": "Analyze the following code and identify any security vulnerabilities.\ndef read_from_user_input(string):\n    # Read user input\n    input_str = input(string)\n    # Return evaluated string\n    return eval(input_str)",
        "output": "# The code is vulnerable to code injection since the ``eval()`` function evaluates the input as Python code. This could potentially lead to arbitrary code execution with maliciously crafted input from an attacker. \n\ndef read_from_user_input(string):\n    # Read user input\n    input_str = input(string)\n    # Return evaluated string\n    return eval(input_str)"
    },
    {
        "instruction": "Design a function for string reverse in Python.",
        "output": "def str_reverse(mystr):\n  rev_str = \"\"\n  i = len(mystr)-1\n  while(i >= 0):\n    rev_str+= mystr[i]\n    i-=1\n  return rev_str"
    },
    {
        "instruction": "Generate a list of 10 random numbers using a Python program.",
        "output": "import random \n  \n# Use a sample set of 7 elements \nrandList = random.sample(range(0, 100), 10) \n  \n# Print the random sample \nprint(randList)"
    },
    {
        "instruction": "Write a Python program to sort the following dictionary by value in descending order.\ndictionary = {\n 'a': 7,\n 'b': 3,\n 'c': 8,\n 'd': 2\n}",
        "output": "import operator\n\nsorted_dictionary = dict(sorted(dictionary.items(), key=operator.itemgetter(1), reverse=True))\nprint(sorted_dictionary)"
    },
    {
        "instruction": "Implement a selection sort algorithm in Python",
        "output": "def selection_sort(arr): \n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n              \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr"
    },
    {
        "instruction": "Write a code in Python that takes an array of integers and returns the smallest number in the array\n[5, 3, 76, 32, 11]",
        "output": "def smallest_number(arr):\n    smallest = arr[0]\n    for num in arr:\n        if num < smallest:\n            smallest = num\n\n    return smallest\n\n# Test\nprint(smallest_number([5, 3, 76, 32, 11]))"
    },
    {
        "instruction": "Create a class in Python to calculate the sum of two numbers",
        "output": "class Summation:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def calculate(self):\n        return self.a + self.b\n\n# Test\nsum1 = Summation(3, 5)\nprint(sum1.calculate())"
    },
    {
        "instruction": "Generate a Python function to search for a specific element in an array\n[1, 4, 2, 6]",
        "output": "def search_element(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n\n# Test\nprint(search_element([1, 4, 2, 6], 4))"
    },
    {
        "instruction": "Construct a Python program to check if two strings are anagrams",
        "output": "def isAnagram(s1, s2):  \n    # remove white spaces\n    s1 = s1.replace(' ', '')\n    s2 = s2.replace(' ', '')\n\n    # sort both strings\n    s1 = ''.join(sorted(s1))\n    s2 = ''.join(sorted(s2))\n  \n    # if both sorted strings are equal, then strings are anagrams\n    return s1 == s2\n\n# Test\nstr1 = 'earth'\nstr2 = 'heart'\n\nif isAnagram(str1, str2):\n    print('The two strings are anagrams')\nelse:\n    print('The two strings are not anagrams')"
    },
    {
        "instruction": "Use Python to generate a random integer between 1 and 10.",
        "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(random_number)"
    },
    {
        "instruction": "Classify the following text as either positive or negative sentiment using a machine learning algorithm in Python.\nThis movie was terrible!",
        "output": "negative sentiment"
    },
    {
        "instruction": "Create a function in Python to calculate the Fibonacci sequence up to the 10th number.",
        "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n\nprint(Fibonacci(10))"
    },
    {
        "instruction": "Write a Python program to find the sum of all prime numbers in a given range.",
        "output": "def sum_of_prime_numbers(lower, upper): \n    sum = 0\n    while lower <= upper: \n        if is_prime(lower): \n            sum += lower \n        lower += 1\n    return sum\n\ndef is_prime(n):\n    if n == 1: \n        return False\n    for i in range(2, n//2 + 1): \n        if n%i == 0:\n            return False \n    return True\n\nprint(sum_of_prime_numbers(1, 10))"
    },
    {
        "instruction": "Given a JSON string, what is the best way to parse it?",
        "output": "The best way to parse a JSON string is to use a JSON parsing library such as json.loads() in Python or JSON.parse() in JavaScript."
    },
    {
        "instruction": "How do you perform exception handling in Python?",
        "output": "Exception handling in Python is done using try and except blocks. The code that can potentially raise an exception is put in the try block, and the code to handle the exception is written in the except block. For example:\n\ntry:\n   # Code that can cause exception\nexcept ExceptionName:\n   # Code to handle exception"
    },
    {
        "instruction": "How do you define a class in Python?",
        "output": "In Python, a class can be defined using the class keyword followed by the name of the class. The class is then prefixed with basic state variables and methods. For example:\n\nclass MyClass:\n  def __init__(self, var1, var2):\n    self.var1 = var1\n    self.var2 = var2\n\n  def myMethod(self):\n    # Code to execute\n    pass"
    },
    {
        "instruction": "Given a list of strings, how do you search for a substring in each string using Python?",
        "output": "To search for a substring in a list of strings using Python, you can use a for loop to iterate through the list and check if the substring is present in the string using the in keyword. For example:\n\nmylist = [\"Hello\", \"World\", \"Foo\", \"Bar\"]\n\nfor i in mylist:\n  if \"oo\" in i:\n    print(\"Substring found!\")"
    },
    {
        "instruction": "Implement a depth-first search algorithm in Python.",
        "output": "def dfs(graph, start):\n    visited, stack = set(), [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(graph[vertex] - visited)\n    return visited"
    },
    {
        "instruction": "Create Python code to find out the number of times a word appears in a given string.\ntext = \"Hello world, how are you? I am fine. I am also doing great.\"\nword = \"am\"",
        "output": "def count_word(text, word):\n    # split the text into words \n    words = text.split() \n  \n    # count the occurrence of the word \n    count = 0\n    for w in words: \n        if w.lower() == word.lower(): \n            count += 1\n  \n    return count"
    },
    {
        "instruction": "Create a Python script to extract all words that start with the letter \u2018a\u2019 from the text.\nThe apple tree has been around since time immemorial.",
        "output": "['apple', 'around', 'since', 'time']"
    },
    {
        "instruction": "Use the following list to modify the code such that it prints out only the numbers and not the strings.\nlist = [\"1\", \"python\", \"2\", \"javascript\", \"3\", \"pydata\", \"4\", \"pandas\"]",
        "output": "list = [\"1\", \"2\", \"3\", \"4\"]\nfor elem in list:\n    if elem.isdigit():\n        print(elem)"
    },
    {
        "instruction": "Write the code in Python to print the number of days in a given year.",
        "output": "import calendar\n\nyear = 2019\n\ndays_in_year = calendar.monthrange(year, 12)[1]\n\nprint(\"Number of days in the year: %s\" % days_in_year)"
    },
    {
        "instruction": "Write a Python code to create a loop that prints the numbers 1 to 10.",
        "output": "for i in range(1, 11): \n  print(i)"
    },
    {
        "instruction": "Write a Python code to sort a list of five numbers in increasing order.\nmyList = [8, 9, 5, 1, 10]",
        "output": "myList.sort() \nprint(myList)"
    },
    {
        "instruction": "Write a Python code to check if a string contains the word \"hello\".\nmyString = \"hello, world!\"",
        "output": "if \"hello\" in myString:\n    print(\"The string contains the word 'hello'.\")\nelse:\n    print(\"The string does not contain the word 'hello'.\")"
    },
    {
        "instruction": "Create an HTTP request with the Python Requests library",
        "output": "import requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nprint(response.status_code)\n\n# Output"
    },
    {
        "instruction": "Rewite the following code in Python to use functions instead of repeated code lines.\narr = [4, 2, 8, 1, 9]\nmax = 0\nfor x in arr:\n   if x > max:\n       max = x\nprint(max)",
        "output": "def getMax(arr):\n    max = 0\n    for x in arr:\n        if x > max:\n            max = x\n    return max\n\narr = [4, 2, 8, 1, 9]\nmaxValue = getMax(arr)\nprint(maxValue)"
    },
    {
        "instruction": "Create a class in Python to store information about a book.",
        "output": "class Book:\n    def __init__(self, title, author, publisher, date_published):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.date_published = date_published\n    \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_publisher(self):\n        return self.publisher\n    \n    def get_date_published(self):\n        return self.date_published"
    },
    {
        "instruction": "Create an exception handler for a Python code that prints out a custom error message.",
        "output": "try:\n    # Code goes here\nexcept Exception as e:\n    print(\"Error:\", e)"
    },
    {
        "instruction": "Write a Python function to sort a list of numbers from smallest to largest.\n[1, 5, 3, 8, 4, 2]",
        "output": "def sort(nums):\n  nums.sort()\n  return nums\n\nprint(sort([1, 5, 3, 8, 4, 2]))"
    },
    {
        "instruction": "Write a function in Python that takes in a list of numbers and returns their sum.\nnumbers = [1,2,3,4,5]",
        "output": "def sum_list(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nprint(sum_list(numbers))"
    },
    {
        "instruction": "Translate the following loop into list comprehension in Python.\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)",
        "output": "numbers = [i for i in range(10) if i % 2 == 0]"
    },
    {
        "instruction": "Create a Python function to check whether a given string can be read the same way from left to right and from right to left.",
        "output": "def is_palindrome(string):\n    left_index = 0\n    right_index = len(string) - 1\n    \n    while right_index > left_index:\n        if string[left_index] != string[right_index]:\n            return False\n        left_index += 1\n        right_index -= 1\n    \n    return True"
    },
    {
        "instruction": "Write a Python function to divide two integers without using the '/' operator.",
        "output": "def divide(dividend, divisor):\n    sign = (dividend < 0) == (divisor < 0)\n    dividend = abs(dividend)\n    divisor = abs(divisor)\n    res = 0\n    while dividend >= divisor:\n        dividend -= divisor\n        res += 1\n    return res if sign else - res"
    },
    {
        "instruction": "Write a Python script to perform stock analysis.\nThe following are the stocks given:AAPL, TSLA, AMZN",
        "output": "def stock_analysis(stocks):\n    # Import necessary Python libraries\n    import pandas as pd\n    import pandas_datareader.data as web\n    \n    # List of stocks given\n    stocks = stocks.split(\",\")\n    \n    # Get the data for each stock\n    data = [web.DataReader(stock, 'yahoo') for stock in stocks]\n    \n    # Create a pandas DataFrame to store the data\n    data_frame = pd.concat(data, keys=stocks, names=['Stock', 'Date'])\n    \n    # Perform the analysis and return the results\n    return data_frame.describe()"
    },
    {
        "instruction": "Create a Python script to parse JSON data and extract specific values.\n{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"hobbies\": [\"cooking\", \"programming\"]\n}",
        "output": "import json\n\ndef parse_json(data):\n    # Load data\n    json_data = json.loads(data)\n\n    # Extract information\n    name = json_data[\"name\"]\n    age = json_data[\"age\"]\n    hobbies = json_data[\"hobbies\"]\n\n    # Return the extracted data\n    return (name, age, hobbies)"
    },
    {
        "instruction": "Create a Python program to print out the constant list of characters for a given string.\nString = \"Hello World!\"",
        "output": "def constant_list(s):\n    new_list = []\n    count_dict = {}\n    for i in s:\n        if i not in count_dict:\n            count_dict[i] = 1\n            new_list.append(i)\n    return new_list\n\nprint(constant_list(\"Hello World!\"))"
    },
    {
        "instruction": "Create a Python script to remove duplicate elements from a given list.\n[1, 2, 3, 4, 1, 2, 3]",
        "output": "def remove_duplicates(numbers):\n    seen = set()\n    non_duplicates = []\n    for num in numbers:\n        if num not in seen:\n            non_duplicates.append(num)\n            seen.add(num)\n    return non_duplicates"
    },
    {
        "instruction": "Write code in Python that finds the longest word in a sentence.\nIt\u2019s a fun and interesting day.",
        "output": "sentence = \"It's a fun and interesting day.\"\nwords = sentence.split()\nlongest_word = max(words, key = len)\nprint(longest_word) # Output: interesting"
    },
    {
        "instruction": "Create a Python function for calculating the volume of a sphere.",
        "output": "def volume_sphere(radius):\n    return (4/3)*(math.pi)*(radius**3)"
    },
    {
        "instruction": "Design a Python program to sort a list of numbers using Bubble Sort.\n[5, 4, 7, 1, 8]",
        "output": "def bubbleSort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"
    },
    {
        "instruction": "Write a Python program for traversing a tree in preorder.",
        "output": "def preorder(root):\n if root:\n #visit the node\n print(root.data)\n #traverse left\n preorder(root.left)\n #traverse right\n preorder(root.right)"
    },
    {
        "instruction": "Using arrays and functions, design a Python program that rotates a given array by k positions.\ntestcase = [1, 2, 3, 4, 5, 6]\n\nk = 2",
        "output": "def rotate_array(testcase, k): \n \n rotated_array = [] \n \n for element in range(len(testcase)-k, len(testcase)): \n   rotated_array.append(testcase[element]) \n \n for element in range(0, len(testcase)-k): \n   rotated_array.append(testcase[element]) \n \n return rotated_array \n \ntestcase = [1, 2, 3, 4, 5, 6] \nk = 2\n \nrotated_array = rotate_array(testcase, k) \n \nprint(rotated_array) \n \n# Output: [5, 6, 1, 2, 3, 4]"
    },
    {
        "instruction": "Construct an HTML ready table from the given Python dictionary.\ndata = { 'fruit': ['banana', 'apple', 'orange'],\n          'vegetable': ['carrot', 'onion', 'cucumber']\n        }",
        "output": "<table>\n    <thead>\n        <tr>\n            <th>Fruit</th>\n            <th>Vegetable</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>banana</td>\n            <td>carrot</td>\n        </tr>\n        <tr>\n            <td>apple</td>\n            <td>onion</td>\n        </tr>\n        <tr>\n            <td>orange</td>\n            <td>cucumber</td>\n        </tr>\n    </tbody>\n</table>"
    },
    {
        "instruction": "Construct an array from the given list in Python.\nlist = [ \"a\", \"b\", \"c\", \"d\" ]",
        "output": "array = [ \"a\", \"b\", \"c\", \"d\" ]"
    },
    {
        "instruction": "Generate an integer array of size 1000 in Python with each element being a random integer between 0 ~ 250.",
        "output": "import random\narray = [random.randint(0, 250) for _ in range(1000)]"
    },
    {
        "instruction": "Find the median of the following list of numbers in Python: [2, 5, 15, 22, 17, 29]",
        "output": "median = 17"
    },
    {
        "instruction": "Calculate the maximum of the following list of numbers in Python: [2, 15, 13, 8, 6]",
        "output": "maximum = 15"
    },
    {
        "instruction": "Write a Python function that takes as input a set of numbers and returns the sum of the rectangular area covered by these numbers.\nnumbers = [2, 4, 6]",
        "output": "def sum_rect_area(numbers):\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i] * numbers[(i+1) % len(numbers)]\n    return sum"
    },
    {
        "instruction": "Rearrange the given list in Python such that the greatest element is placed at the first position and the smallest element at the last.\nmy_list = [4, 5, 8, 6, 9]",
        "output": "my_list = [9, 8, 6, 5, 4]"
    },
    {
        "instruction": "Create a function in Python which will take a number as input and return an array containing the prime factors of the number.",
        "output": "def get_prime_factors(num): \n    # Initialize an empty list \n    prime_factors = [] \n  \n    # Find the number of 2 that divide n \n    while num % 2 == 0: \n        prime_factors.append(2) \n        num //= 2\n  \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3, int(math.sqrt(num)) + 1, 2): \n        # While i divides n, append i and divide n \n        while num % i == 0: \n            prime_factors.append(i) \n            num //= i \n    # This condition is to handle the \n    # case when n is a prime number \n    # greater than 2 \n    if num > 2: \n        prime_factors.append(num) \n    return prime_factors"
    },
    {
        "instruction": "Write a function to append a new item to the given list in Python.\nmy_list = ['a', 'b', 'c']",
        "output": "def append_item(my_list, item): \n    my_list.append(item) \n    return my_list"
    },
    {
        "instruction": "Input two numbers from the user and find the greatest common divisor of the two numbers in Python.",
        "output": "def gcd(a,b):\n    while(b):\n        a,b=b,a%b\n\n    return a"
    },
    {
        "instruction": "Determine if a given string has all unique characters in Python.",
        "output": "def has_unique_characters(string): \n    # Convert string to list of characters \n    char_list = list(string) \n  \n    # Construct a set to iterate over it \n    char_set = set() \n  \n    # return False if any character is already present in the set otherwise True \n    for character in char_list: \n        if character in char_set: \n            return False\n        else: \n            char_set.add(character) \n    return True"
    },
    {
        "instruction": "Write a Python function to check whether a string contains all the letters of the alphabet or not.",
        "output": "def has_all_alphabets(string):\n    # Convert string to list of characters \n    char_list = list(string) \n\n    # Construct a set of alphabets \n    all_alphabets = set(string.ascii_lowercase) \n\n    # Compare char_list and all_alphabets \n    # return False if any character is not present\n    # in the set otherwise True \n    if all_alphabets.issubset(char_list):\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "In Python, create a for loop to print out all the natural numbers in a range\nFrom 0 to 10",
        "output": "for i in range(0, 11):\n print(i)"
    },
    {
        "instruction": "Create a python program that sums up all the numbers in a list\n[1, 2, 3, 4, 5]",
        "output": "def sum_list(lst):\n sum = 0\n for number in lst:\n   sum += number\n return sum"
    },
    {
        "instruction": "Design an algorithm in Python to check if one given string is an anagram of another\ns1 = 'listen' s2 = 'silent'",
        "output": "def is_anagram(s1, s2):\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.sort()\n    s2_list.sort()\n\n    if len(s1_list) != len(s2_list):\n        return False\n\n    for i in range(len(s1_list)):\n        if s1_list[i] != s2_list[i]:\n            return False\n    return True"
    },
    {
        "instruction": "Design an algorithm in Python to determine if a number is prime",
        "output": "def is_prime(n):\n   if n <= 1:\n      return False\n   for i in range(2, int(n**0.5) + 1):\n      if n % i == 0: \n         return False\n   return True"
    },
    {
        "instruction": "Write a Python code snippet to print all the items from a list.",
        "output": "for item in my_list:\n    print(item)"
    },
    {
        "instruction": "How can you delete a value from a dictionary in Python?",
        "output": "You can delete a value from a dictionary in Python using the 'del' statement. For example, to delete the value at the key 'x', you can use the following command:\n\ndel my_dict['x']"
    },
    {
        "instruction": "Create an array of ten random numbers using Python.",
        "output": "import random\n\nrandom_numbers = []\nfor _ in range(10):\n    random_numbers.append(random.randint(0, 100))\n\nprint(random_numbers)"
    },
    {
        "instruction": "Find the most frequent words in the following sentence using Python.\nThe quick brown fox jumps over the lazy dog",
        "output": "import collections\n\nwords = 'The quick brown fox jumps over the lazy dog'.split()\nword_count = collections.Counter(words)\nmost_common_word = word_count.most_common()\n\nprint(\"The most frequent words are: \" + str(most_common_word))"
    },
    {
        "instruction": "Create a class called \u201cPerson\u201d in Python that takes in name and age as parameters.",
        "output": "class Person: \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age\n  \n    def show_details(self): \n        print(\"Name: {}\".format(self.name)) \n        print(\"Age: {}\".format(self.age))"
    },
    {
        "instruction": "Given a list of numbers, write a function to find the sum of all the numbers in Python.\nmy_list = [1, 3, 5, 7, 9]",
        "output": "def sum_of_nums(my_list):\n    total = 0\n    for x in my_list:\n        total += x\n    return total\n\nprint(\"The sum of my_list is: \" + str(sum_of_nums(my_list)))"
    },
    {
        "instruction": "Create an array list of objects containing name and age for two people in Python.",
        "output": "my_list = [\n    {'name': 'John', 'age': 20},\n    {'name': 'Sarah', 'age': 22}\n]"
    },
    {
        "instruction": "Write an API endpoint in Python that responds to a \u201cPOST\u201d request with an array of numbers.",
        "output": "@app.route(\"/post\", methods=[\"POST\"])\ndef post_endpoint():\n    request_data = request.get_json()\n    numbers = request_data[\"numbers\"]\n    response_data = {\n        \"status\": \"success\",\n        \"data\": numbers\n    }\n    return jsonify(response_data)"
    },
    {
        "instruction": "Write a for loop to print the numbers 10 to 20 in Python.",
        "output": "for i in range(10, 21):\n    print(i)"
    },
    {
        "instruction": "Create an algorithm in Python that sorts an array of numbers in ascending order.\n[4, 7, 2, 8]",
        "output": "def selectionSort(arr): \n\t# Traverse through all array elements \n\tfor i in range(len(arr)): \n\t\t# Find the minimum element in remaining \n\t\t# unsorted array \n\t\tmin_idx = i \n\t\tfor j in range(i+1, len(arr)): \n\t\t\tif arr[min_idx] > arr[j]: \n\t\t\t\tmin_idx = j \n\t\t\n\t\t# Swap the found minimum element with \n\t\t# the first element\t\t \n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n# Driver code to test above \narr = [4, 7, 2, 8] \nselectionSort(arr) \n\n# Print sorted array\nprint('Sorted array is: ', end = '')\nfor i in range(len(arr)): \n\tprint(arr[i], end = ' ') \n\n# Output: \n# Sorted array is: 2 4 7 8"
    },
    {
        "instruction": "Create a Python program to calculate the absolute value of a number given as input.\n-5",
        "output": "def Absolute(number):\n\tif number < 0:\n\t\treturn -number\n\telse:\n\t\treturn number\n\n# Print the absolute value\nprint(Absolute(-5))\n\n# Output:\n# 5"
    },
    {
        "instruction": "Using Python and the pandas library, write a code to print the mean of all the columns in a given dataframe.\nDataframe: \n\nindex  accNum   name       age  gender \n0      100234   Alex        28   Male\n1      102245   Bob         20   Male\n2      103654   Elizabeth   32   Female",
        "output": "import pandas as pd\n  \n# Create the dataframe \ndf = pd.DataFrame({'accNum':[100234,102245, 103654], \n                   'name':['Alex', 'Bob', 'Elizabeth'], \n                   'age':[28, 20, 32], \n                   'gender': ['Male', 'Male', 'Female']})\n\n# Calculate and print the mean of all the columns \nprint(df.mean())\n\n# Output:\naccNum    102890.0\nage          26.0\ndtype: float64"
    },
    {
        "instruction": "How can you split a string with multiple delimiters in python?",
        "output": "You can split a string with multiple delimiters in python using the re.split() function. This function takes a regular expression as an argument, which can include multiple delimiters. For example, the following will split a string at any whitespace characters: \n\nimport re\n\nstring = 'This is a string with multiple delimiters'\nprint(re.split('\\s+', string))"
    },
    {
        "instruction": "Develop a python program to list out the unique elements of a tuple.\nmy_tuple = (1, 2, 3, 2, 4, 5, 6, 2)",
        "output": "# Program to find out unique elements of a tuple\n\ndef unique_elements(my_tuple):\n    unique_list = []\n    for element in my_tuple:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\n# Test the function\nmy_tuple = (1, 2, 3, 2, 4, 5, 6, 2)\nunique_elements = unique_elements(my_tuple)\nprint(unique_elements)\n\n# The output of this program will be\n# [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Explain how regular expressions can be used to identify and replace text in Python?",
        "output": "Regular expressions can be used to identify and replace text in Python by using the re module. This module provides methods for searching for and matching patterns in text, discovering patterns in text, and replacing parts of a string matching a pattern. The re.sub() method can be used to search for a specified pattern, and then replace the matching pattern with a new string. For example, the following code will replace all occurences of 'a' with 'b':\n\nimport re\nstring = 'This is a string that contains a few letters a.'\nre.sub('a', 'b', string)\n\n# The output of this code will be:\n# This is b string that contains b few letters b."
    },
    {
        "instruction": "Explain how to parse a date string in Python",
        "output": "In Python, you can parse a date string using the datetime module. This module contains functions and classes to parse, format, and manipulate dates and times in both simple and complex ways. The datetime.strptime() function can be used to convert a date string to a datetime.datetime object. This function takes two arguments: a string containing the date string, and a formatting string indicating the format of the date string. For example, the following code will parse the date in the string \"25/12/2019\":\n\nimport datetime\ndate_str = \"25/12/2019\"\ndate_object = datetime.datetime.strptime(date_str, '%d/%m/%Y')\n\n# The output of this code will be a datetime.datetime object\n# datetime.datetime(2019, 12, 25, 0, 0)"
    },
    {
        "instruction": "Create a Python code snippet to convert temperatures from Fahrenheit to Celsius.",
        "output": "def fahrenheit_to_celsius(temp):\n    \"\"\"Converts temperature in Fahrenheit to Celsius.\"\"\"\n    return (temp - 32.0) * 5.0 / 9.0"
    },
    {
        "instruction": "Write a Python code snippet to randomly select a number from a list [1, 2, 3, 4, 5, 6].",
        "output": "import random\n\nmy_list = [1, 2, 3, 4, 5, 6]\n\nrandom_number = random.choice(my_list)\nprint(random_number)"
    },
    {
        "instruction": "Write a function in Python to print the maximum number between two numbers given as input.\nnum1 = 10, num2 = 12",
        "output": "def max_num(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n\nmax_num_val = max_num(10, 12)\nprint(\"The maximum of the two numbers is:\", max_num_val)"
    },
    {
        "instruction": "Write a function in Python to print the first 10 elements in a list.",
        "output": "def print_first_10_elements(list): \n  for i in range (0, 10): \n    print (list[i])"
    },
    {
        "instruction": "Write a Python function to find the mode of the given list of numbers.",
        "output": "def find_mode(numbers): \n    data = Counter(numbers) \n    get_mode = dict(data) \n    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))] \n\n    if len(mode) == len(numbers): \n        get_mode = \"No mode found\"\n    else: \n        get_mode = \"Mode is / are: \" + ', '.join(map(str, mode)) \n  \n    return get_mode"
    },
    {
        "instruction": "Write a python program to calculate the mean of a list\n[1, 2, 3, 4, 5]",
        "output": "def mean(mylist):\n    sum_list = sum(mylist)\n    list_length = len(mylist)\n    mean = sum_list/list_length\n    return mean\n\nprint(mean([1, 2, 3, 4, 5]))"
    },
    {
        "instruction": "Write a Python function that takes in a word and returns the same word in reverse.\nString word = \"hello\";",
        "output": "def reverseWord(word):\n    reversed = \"\"\n    for i in range(len(word)-1, -1, -1):\n        reversed += word[i]\n    return reversed"
    },
    {
        "instruction": "Create a Python class called 'Animal' with 2 fields: name and type.",
        "output": "class Animal(object):\n  def __init__(self, name, type):\n    self.name = name\n    self.type = type"
    },
    {
        "instruction": "Convert the given sentence into a Python dictionary.\nJohn is 25 years old, married with two children.",
        "output": "{\n    'name': 'John',\n    'age': 25,\n    'marital_status': 'married',\n    'children': 2\n}"
    },
    {
        "instruction": "Convert the following JSON string into Python dictionary.\n{\"id\": 105, \"name\": \"John Doe\", \"age\": 30}",
        "output": "data_dict = {\n    \"id\": 105,\n    \"name\": \"John Doe\",\n    \"age\": 30\n}"
    },
    {
        "instruction": "Generate a LaTeX table with 4 columns to compare the following programming languages: Java, Python, C#, and JavaScript.",
        "output": "\\begin{tabular}{|l|l|l|l|}\n\\hline \n  & Java & Python & C\\# \\\\ \n\\hline \n\\textbf{Typing} & Strongly Typed & Strongly/Dynamically Typed & Stongly Typed \\\\ \n\\hline \n\\textbf{Suport} & Wide & Wide & Wide \\\\ \n\\hline \n\\textbf{Speed} & Slow & Medium & Fast \\\\ \n\\hline \n\\textbf{Web Dev} & Low & High & High \\\\\n\\hline \n\\end{tabular}"
    },
    {
        "instruction": "Create a python script that returns the sum of the given list `lst`.\nlst = [1, 2, 3, 4, 5]",
        "output": "def find_sum(lst):\n sum = 0\n for num in lst:\n sum += num\n return sum\n\ntotal = find_sum([1, 2, 3, 4, 5])\nprint(total) # 15"
    },
    {
        "instruction": "Write a Python script to scrape a website for all links.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n\t# make a GET request\n\tr = requests.get(url)\n\t# parse the content\n\tsoup = BeautifulSoup(r.content, 'html.parser')\n\t# find all links\n\tlinks = soup.find_all('a')\n\t# return list of links\n\treturn [link.get('href') for link in links]"
    },
    {
        "instruction": "Identify the language in which the following code is written.\na = \"Hello World\"\nprint(a)",
        "output": "Python"
    },
    {
        "instruction": "Write a function in Python that reverses a given string.",
        "output": "def reverse_string(string):\n    '''This function reverses the given string'''\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"
    },
    {
        "instruction": "Create a class in Python that implements insertion sort to sort a given array of integers.",
        "output": "class InsertionSort:\n    def sort(self, nums):\n        for i in range(1, len(nums)): \n            key = nums[i] \n            j = i-1\n            while j >= 0 and key < nums[j] : \n                    nums[j + 1] = nums[j] \n                    j -= 1\n            nums[j + 1] = key\n        return nums"
    },
    {
        "instruction": "Using regular expressions, write a Python function to find all the alphabetic words from a given string.",
        "output": "def find_words(string):\n    return re.findall(\"\\w+\", string)"
    },
    {
        "instruction": "Write a Python program to parse a given web page and extract all the text from the web page.",
        "output": "def parse_html(html):\n    soup = BeautifulSoup(html, 'html.parser')\n    text = soup.find_all(text=True)\n    visible_texts = filter(visible_text, text)\n    return \" \".join(visible_texts)\n\ndef visible_text(element):\n    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:\n        return False\n    if isinstance(element, Comment):\n        return False\n    return True"
    },
    {
        "instruction": "Create a function in Python to determine if a given BST with n nodes contains a valid BST.",
        "output": "def is_valid_bst(root, min=-1e40, max=1e40):\n    if root is None:\n        return True\n    \n    if root.val <= min or root.val >= max:\n        return False\n    \n    return is_valid_bst(root.left, min, root.val) and is_valid_bst(root.right, root.val, max)"
    },
    {
        "instruction": "Write a Python program to find the optimal number of clusters for clustering a given set of data points.",
        "output": "def optimal_clusters(data):\n    best_score = -1e10\n    best_k = 0\n    for k in range(1, len(data) + 1):\n        kmeans = KMeans(n_clusters=k) \n        kmeans.fit(data)\n        score = kmeans.inertia_\n        if score > best_score:\n            best_score = score\n            best_k = k\n    return best_k"
    },
    {
        "instruction": "Create a Python dictionary from the following 2 lists.\nKeys = [\"a\", \"b\", \"c\"]\nValues = [1, 2, 3]",
        "output": "dictionary = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n    }"
    },
    {
        "instruction": "Answer the following question: Is there a way to create models in Python with deep learning with fewer lines of code?",
        "output": "Yes, there is a way to create deep learning models in Python with fewer lines of code. Many libraries provide a high level of abstraction for deep learning tasks such as Keras, TensorFlow, PyTorch, and fast.ai, which allow developers to create models in fewer lines of code. Additionally, there are tools such as AutoML or Transfer learning that allow developers to create models with minimal code."
    },
    {
        "instruction": "Create a class in Python that implements a stack.",
        "output": "class Stack:\n    def __init__(self):\n        self.items = []\n        \n    def isEmpty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)"
    },
    {
        "instruction": "Modify the following python code to include try/catch construct\ndef sort_array(array):\n    array.sort()",
        "output": "def sort_array(array):\n    try: \n        array.sort()\n    except Exception as e:\n        print('Error occured while sorting',e)"
    },
    {
        "instruction": "How to check if a string is a valid IP address in python?",
        "output": "import re\n\ndef is_valid_ip(ip_string):\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n        25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n        25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n        25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n    if re.search(regex, ip_string):  \n        return True \n    else : \n        return False"
    },
    {
        "instruction": "Write a code in python to separate the elements of a given list into even and odd numbers.\nmy_list = [1,3,4,6,7,8]",
        "output": "my_list = [1,3,4,6,7,8]\n\neven_numbers = []\nodd_numbers = []\n\nfor num in my_list:\n    if num % 2 == 0:\n        even_numbers.append(num)\n    else:\n        odd_numbers.append(num)"
    },
    {
        "instruction": "How to check if a value exist in a dictionary in python?",
        "output": "my_dict = {'key1':'value1', 'key2':'value2', 'key3':'value3'}\n\ndef is_in_dict(key, my_dict):\n    return key in my_dict"
    },
    {
        "instruction": "Write a function in Python to replace a substring in a given string.",
        "output": "def replace_substring(string, target_substring, replacement):\n    return string.replace(target_substring, replacement)"
    },
    {
        "instruction": "How to sort a list of tuples in python?",
        "output": "my_list = [('apple', 5), ('banana', 7), ('guava', 2)]\n\nsorted_list = sorted(my_list, key=lambda tup: tup[1])"
    }
]