{
    "tasks": [
        {
            "task_id": 1,
            "task_name": "Task 1: Customised Greeting Using f-Strings",
            "task_description": "This task introduces you to f-strings in Python, which is a more modern and efficient way to format strings. You'll fix a Python program that prints a customised greeting, such as 'Hello, Alice!' where 'Alice' is the user's name.",
            "incorrect_code": "user_name = Alice\nprint(f'Hello, {user_name}') #What do you think the brackets {} are for?", 
            "correct_code": "user_name = 'Alice'\nprint(f'Hello, {user_name}')",
            "description": "The incorrect code misses the quotation marks around the user's name and attempts to use a variable without properly defining it as a string.",
            "explanation": "In Python, strings must be enclosed in quotes. The f-string allows you to directly embed expressions inside string literals using curly braces {}.",
            "expected_output": "Hello, Alice!",
            "follow_up_challenge": "Modify the program to print 'Welcome, Alice!' instead. This will help you understand how to use f-strings to create dynamic output.",
            "reflection_question": "Why is it important to use quotation marks for strings in Python? How does using f-strings improve readability and efficiency in creating dynamic output?"
        },
        {
            "task_id": 2,
            "task_name": "Task 2: Writing a Simple Function",
            "task_description": "This task introduces you to writing functions in Python. You'll fix a Python function that takes two numbers as arguments, adds them, and returns the result.",
            "incorrect_code": "def add_numbers(a, b):\nresult = a plus b\nreturn result\n\nprint(add_numbers(3, 5))",
            "correct_code": "def add_numbers(a, b):\nresult = a + b\nreturn result",
            "description": "The incorrect code uses non-Pythonic syntax for the addition operation within a function.",
            "explanation": "In Python, functions allow you to encapsulate code for reuse. The correct syntax for addition is '+', not 'plus'.",
            "expected_output": "8",
            "follow_up_challenge": "Modify the function to subtract the second number from the first instead of adding them.",
            "reflection_question": "Why do you think functions might useful in programming? How do you think functions might help you organise and reuse your code effectively?"
        },
        {
            "task_id": 3,
            "task_name": "Task 3: List Operations",
            "task_description": "In this task, you'll work with lists and perform operations on them. You'll fix a Python program that creates a list of numbers, adds a new number to the list, and then prints the updated list and its length.",
            "incorrect_code": "numbers = [1, 2, 3] #This is a list of numbers.\nnumbers.append[4]\nprint(numbers)\nlength = len[number]\nprint(f'Length: {length}')",
            "correct_code": "numbers = [1, 2, 3]\nnumbers.append(4)\nprint(numbers)\nlength = len(numbers)\nprint(length)",
            "description": "The incorrect code attempts to use methods and functions incorrectly, particularly in the syntax for appending to a list and calculating the length of the list.",
            "explanation": "In Python, lists use parentheses for method calls, not square brackets. The 'append' method and 'len' function require correct syntax to function properly.",
            "expected_output": "[1, 2, 3, 4]\n Length: 4",
            "follow_up_challenge": "Remove the number '2' from the list and print the updated list and its new length.",
            "reflection_question": "How does Python's list syntax help in managing collections of items? Why is it important to understand the difference between methods like 'append()' and functions like 'len()'?"
        },        
        {
            "task_id": 4,
            "task_name": "Task 4: Using Loops",
            "task_description": "This task introduces you to loops in Python. You'll fix a Python program that uses a for loop to print the numbers from 1 to 5.",
            "incorrect_code": "for i in range(1, 5):\nprint i",
            "correct_code": "for i in range(1, 6):\n    print(i)",
            "description": "The incorrect code uses outdated print syntax and has an off-by-one error in the loop range.",
            "explanation": "In Python, print is a function and requires parentheses. Also, to include the number 5, the range should end at 6, since the end value is exclusive.",
            "expected_output": "1\n2\n3\n4\n5",
            "follow_up_challenge": "Modify the loop to print only even numbers from 1 to 10.",
            "reflection_question": "How do you think loops help automate repetitive tasks in programming? What are some potential problems you might need to watch out for when using loops?"
        }
    ]
}