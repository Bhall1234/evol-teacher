{
    "lists": {
        "label": ["list", "append", "method", "modification"],
        "examples": [
            {
                "task_id": 1,
                "task_description": "This code is supposed to add an element to a list and print the updated list, but it's not working correctly.",
                "incorrect_code": "my_list = [1, 2, 3]\nnew_list = my_list.append(4)\nprint(new_list)\n",
                "correct_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)\n",
                "description": "Misunderstanding the `append` method's return value.",
                "explanation": "The `append` method modifies the list in place and returns `None`. You should not assign its result to a new variable.",
                "expected_output": "[1, 2, 3, 4]"
            },
            {
                "task_id": 2,
                "task_description": "Another example related to list modification.",
                "incorrect_code": "my_list = [1, 2]\nmy_list = my_list.append(3)\nprint(my_list)",
                "correct_code": "my_list = [1, 2]\nmy_list.append(3)\nprint(my_list)",
                "description": "The same mistake with `append` method.",
                "explanation": "Understanding `append` returns None.",
                "expected_output": "[1, 2, 3]"
            }
        ]
    },
    "functions": {
        "label": ["function", "default parameter", "`def`", "`function`", "parameters", "functions"],
        "examples": [
            {
                "task_id": 3,
                "task_description": "This code is supposed to greet a user, but it's not working correctly when no name is provided. Use the name 'Guest' in this case.",
                "incorrect_code": "def greet(name):\n    print(f'Hello, {name}!')\n\ngreet()\n",
                "correct_code": "# Solution 1\ndef greet(name='Guest'):\n    print(f'Hello, {name}!')\n\ngreet()\n\n # Solution 2\ndef greet(name):\n    print(f'Hello, {name}!')\n\nname='Guest'\ngreet(name)\n",
                "description": "Missing default parameter value.",
                "explanation": "To handle cases where no argument is provided, use a default parameter value like `name='Guest'`.",
                "expected_output": "Hello, Guest!"
            }
        ]
    },
    "dictionaries": {
        "label": ["dictionary", "key", "lookup", "`dict`", "error handling", "hash map", "key error", "hash", "hash table", "table"],
        "examples": [
            {
                "task_id": 4,
                "task_description": "This code is supposed to print the value associated with a given key in a dictionary, but it's not working correctly when the key is not found. The output should be 'City not found'.",
                "incorrect_code": "my_dict = {'name': 'Alice', 'age': 25}\nprint(my_dict['city'])\n",
                "correct_code": "# Solution 1\nmy_dict = {'name': 'Alice', 'age': 25}\ncity = my_dict.get('city')\nif city:\n    print(city)\nelse:\n    print('City not found')\n",
                "description": "The code raises a KeyError because the key 'city' does not exist in the dictionary.",
                "explanation": "In Python, trying to access a dictionary key that does not exist will raise a KeyError. To avoid this, you can use the `get` method to safely retrieve a key's value. The `get` method returns `None` if the key is not found, which you can then check using an if statement.",
                "expected_output": "City not found"
            }
        ]
    },
    "strings":{
        "label": ["string", "concatenation", "`str`", "type error", "concatenate", "combine"],
        "examples": [
            {
                "task_id": 5,
                "task_description": "This code is supposed to concatenate a string and a number, but it's not working correctly.",
                "incorrect_code": "age = 25\nmessage = 'I am ' + age + ' years old.'\nprint(message)\n",
                "correct_code": "# Solution 1\nage = 25\nmessage = 'I am ' + str(age) + ' years old.'\nprint(message)\n# Solution 2\nage = 25\nmessage = f'I am {age} years old.'\nprint(message)\n",
                "description": "TypeError: cannot concatenate 'str' and 'int' objects.",
                "explanation": "You need to convert the integer to a string before concatenation or use an f-string for formatting.",
                "expected_output": "I am 25 years old."
            }
        ]
    },
    "for loops":{
        "label": ["for loop", "`for loop`", "`for`", "for_loop"],
        "examples": [
            {
                "task_id": 6,
                "task_description": "This code is supposed to print each character in the string 'hello', but it's not working correctly.",
                "incorrect_code": "word = 'hello'\nfor i in range(0, len(word) + 1):\n    print(word[i])\n",
                "correct_code": "word = 'hello'\nfor i in range(0, len(word)):\n    print(word[i])\n",
                "description": "IndexError: string index out of range.",
                "explanation": "The range should stop at `len(word)`, not `len(word) + 1`, because indexing is zero-based.",
                "expected_output": "h\ne\nl\nl\no"
            }
        ]
    },
    "while loops":{
        "label": ["while loop", "`while loop`", "`while`", "while_loop"],
        "examples": [
            {
                "task_id": 7,
                "task_description": "This code is supposed to print the numbers from 1 to 5, but it's not working correctly.",
                "incorrect_code": "i = 1\nwhile i <= 5:\n    print(i)\n",
                "correct_code": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n",
                "description": "The loop condition is correct, but the loop becomes an infinite loop because the increment step is missing.",
                "explanation": "In the incorrect code, the value of `i` is not being incremented inside the loop, causing an infinite loop. To fix this, you need to increment `i` by 1 after each iteration.",
                "expected_output": "1\n2\n3\n4\n5"
            }
        ]
    },
    "multiplication":{
        "label": ["multiplication", "*", "multiply", "product"],
        "examples": [
            {
                "task_id": 8,
                "task_description": "This code is supposed to multiply two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def multiply(a, b):\n    return a + b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "correct_code": "def multiply(a, b):\n    return a * b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "description": "The code is performing addition instead of multiplication.",
                "explanation": "The `+` operator is used for addition, while the `*` operator is used for multiplication.",
                "expected_output": "12"
            }
        ]
    },
    "addition":{
        "label": ["addition", "add", "+", "sum"],
        "examples": [
            {
                "task_id": 9,
                "task_description": "This code is supposed to add two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def add(a, b):\n    return a * b\n\nresult = add(3, 4)\nprint(result)\n",
                "correct_code": "def add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)\n",
                "description": "The code is performing multiplication instead of addition.",
                "explanation": "The `*` operator is used for multiplication, while the `+` operator is used for addition.",
                "expected_output": "7"
            },
            {
                "task_id": 10,
                "task_description": "This code is supposed to perform a simple arithmetic calculation, but it's not working correctly.",
                "incorrect_code": "result = 10 + 5 * 2\nprint(result)\n",
                "correct_code": "result = (10 + 5) * 2\nprint(result)\n",
                "description": "The code is not following the correct order of operations.",
                "explanation": "In Python, multiplication and division have higher precedence than addition and subtraction. To ensure the addition is performed first, use parentheses to group the addition operation.",
                "expected_output": "30"
            }
        ]
    },
    "subtraction":{
        "label": ["subtraction", "-", "subtract", "difference"],
        "examples": [
            {
                "task_id": 11,
                "task_description": "This code is supposed to subtract two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def subtract(a, b):\n    return a * b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "correct_code": "def subtract(a, b):\n    return a - b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "description": "The code is performing multiplication instead of subtraction.",
                "explanation": "The `*` operator is used for multiplication, while the `-` operator is used for subtraction.",
                "expected_output": "4"
            }
        ]
    },
    "division":{
        "label": ["division", "divide", "/", "quotient"],
        "examples": [
            {
                "task_id": 12,
                "task_description": "This code is supposed to divide two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def divide(a, b):\n    return a + b\n\nresult = divide(10, 2)\nprint(result)\n",
                "correct_code": "def divide(a, b):\n    return a / b\n\nresult = divide(10, 2)\nprint(result)\n",
                "description": "The code is performing addition instead of division.",
                "explanation": "The `+` operator is used for addition, while the `/` operator is used for division.",
                "expected_output": "5.0"
            }
        ]
    },
    "modulus":{
        "label": ["modulus", "remainder", "%", "modulo"],
        "examples": [
            {
                "task_id": 13,
                "task_description": "This code is supposed to find the remainder of dividing two numbers, but it's not working correctly.",
                "incorrect_code": "def find_remainder(a, b):\n    return a / b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "correct_code": "def find_remainder(a, b):\n    return a % b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "description": "The code is performing division instead of finding the remainder.",
                "explanation": "The `/` operator is used for division, while the `%` operator is used to find the remainder of division.",
                "expected_output": "1"
            }
        ]
    },
    "mathematics":{
        "label": ["mathematics", "math", "calculation", "arithmetic"],
        "examples": [
            {
                "task_id": 14,
                "task_description": "This code is supposed to perform a simple arithmetic calculation, but it's not working correctly.",
                "incorrect_code": "result = 10 + 5 * 2\nprint(result)\n",
                "correct_code": "result = (10 + 5) * 2\nprint(result)\n",
                "description": "The code is not following the correct order of operations.",
                "explanation": "In Python, multiplication and division have higher precedence than addition and subtraction. To ensure the addition is performed first, use parentheses to group the addition operation.",
                "expected_output": "30"
            },
            {
                "task_id": 15,
                "task_description": "This code is supposed to find the remainder of dividing two numbers, but it's not working correctly.",
                "incorrect_code": "def find_remainder(a, b):\n    return a / b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "correct_code": "def find_remainder(a, b):\n    return a % b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "description": "The code is performing division instead of finding the remainder.",
                "explanation": "The `/` operator is used for division, while the `%` operator is used to find the remainder of division.",
                "expected_output": "1"
            },
            {
                "task_id": 16,
                "task_description": "This code is supposed to divide two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def divide(a, b):\n    return a + b\n\nresult = divide(10, 2)\nprint(result)\n",
                "correct_code": "def divide(a, b):\n    return a / b\n\nresult = divide(10, 2)\nprint(result)\n",
                "description": "The code is performing addition instead of division.",
                "explanation": "The `+` operator is used for addition, while the `/` operator is used for division.",
                "expected_output": "5.0"
            },
            {
                "task_id": 17,
                "task_description": "This code is supposed to subtract two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def subtract(a, b):\n    return a * b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "correct_code": "def subtract(a, b):\n    return a - b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "description": "The code is performing multiplication instead of subtraction.",
                "explanation": "The `*` operator is used for multiplication, while the `-` operator is used for subtraction.",
                "expected_output": "4"
            },
            {
                "task_id": 18,
                "task_description": "This code is supposed to add two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def add(a, b):\n    return a * b\n\nresult = add(3, 4)\nprint(result)\n",
                "correct_code": "def add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)\n",
                "description": "The code is performing multiplication instead of addition.",
                "explanation": "The `*` operator is used for multiplication, while the `+` operator is used for addition.",
                "expected_output": "7"
            },
            {
                "task_id": 19,
                "task_description": "This code is supposed to multiply two numbers and return the result, but it's not working correctly.",
                "incorrect_code": "def multiply(a, b):\n    return a + b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "correct_code": "def multiply(a, b):\n    return a * b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "description": "The code is performing addition instead of multiplication.",
                "explanation": "The `+` operator is used for addition, while the `*` operator is used for multiplication.",
                "expected_output": "12"
            }
        ]
    },
    "if statements":{
        "label": ["if", "if statement", "if_statement", "`if`", "if_statements"],
        "examples": [
            {
                "task_id": 20,
                "task_description": "This code is supposed to check if a number is positive, negative, or zero, but it's not working correctly.",
                "incorrect_code": "num = 5\nif num > 0:\n    print('Positive')\nelif num < 0:\n    print('Negative')\nelse:\n    print('Zero')\n",
                "correct_code": "num = 5\nif num > 0:\n    print('Positive')\nelif num < 0:\n    print('Negative')\nelse:\n    print('Zero')\n",
                "description": "The code is correct, but the description is misleading.",
                "explanation": "The code correctly checks if a number is positive, negative, or zero.",
                "expected_output": "Positive"
            }
        ]
    },
    "condtionals":{
        "label": ["conditionals", "conditional", "condition", "conditional statement", "conditional_statement", "conditional_statement", "conditional_statements"],
        "examples": [
            {
                "task_id": 21,
                "task_description": "This code is supposed to check if a number is even or odd, but it's not working correctly.",
                "incorrect_code": "num = 5\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "correct_code": "num = 5\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "description": "The code is correct, but the description is misleading.",
                "explanation": "The code correctly checks if a number is even or odd based on the remainder of division by 2.",
                "expected_output": "Odd"
            }
        ]
    }
}