{
    "lists": {
        "label": ["list", "append", "method"],
        "examples": [
            {
                "task_id": 1,
                "task_description": "You are given a list containing elements, and the goal is to add new elements to this list using a `for` loop. The code is intended to append these new elements to the existing list and then print the updated list. However, it is not working as expected and fails to produce the correct output. Analyze the code to identify the issue and correct it so that the new elements are properly added to the list.",
                "incorrect_code": "my_list = [1, 2, 3]\nfor i in range(4, 5):\n    new_list = my_list.append(i)\nprint(new_list)\n",
                "correct_code": "my_list = [1, 2, 3]\nfor i in range(4, 5):\n    my_list.append(i)\nprint(my_list)\n",
                "description": "Misunderstanding the `append` method's return value.",
                "explanation": "The `append` method modifies the list in place and returns `None`. You should not assign its result to a new variable.",
                "chat_context": "The task is about list modification in Python, specifically using the `append` method within a `for` loop. The issue is related to understanding the return value of the `append` method and how it modifies the list in place. Focus on explaining why the incorrect code does not work as expected and how to fix it.",
                "expected_output": "[1, 2, 3, 4]"
            },
            {
                "task_id": 2,
                "task_description": "This task requires you to add a number to a list using a `for` loop. The code should iterate over a specified range and append each element to the list, then print the final updated list. However, the current code does not perform as intended and does not add the elements correctly. Your job is to identify the error and fix the code so that it properly appends the numbers to the list.",
                "incorrect_code": "my_list = [1, 2]\nfor i in range(3, 4):\n    my_list = my_list.append(i)\nprint(my_list)",
                "correct_code": "my_list = [1, 2]\nfor i in range(3, 4):\n    my_list.append(i)\nprint(my_list)",
                "description": "The same mistake with `append` method.",
                "explanation": "Understanding `append` returns None.",
                "chat_context": "The task is focusing on list modification using the `append` method within a `for` loop. The incorrect code assigns the result of `append` to the list variable, which is not the intended usage. Explain why this approach does not work and how to correct it.",
                "expected_output": "[1, 2, 3]"
            }
        ]
    },
    "functions": {
        "label": ["function", "default parameter", "`def`", "`function`", "parameters", "functions"],
        "examples": [
            {
                "task_id": 3,
                "task_description": "You need to create a function in Python that greets a user by their name. If no name is provided when calling the function, it should default to 'Guest'. However, the current implementation of the code fails to handle the scenario where no name is provided, resulting in an error. Your task is to modify the function to use a default parameter value, ensuring it works correctly when no argument is given.",
                "incorrect_code": "def greet(name):\n    print(f'Hello, {name}!')\n\ngreet()\n",
                "correct_code": "# Solution 1\ndef greet(name='Guest'):\n    print(f'Hello, {name}!')\n\ngreet()\n\n # Solution 2\ndef greet(name):\n    print(f'Hello, {name}!')\n\nname='Guest'\ngreet(name)\n",
                "description": "Missing default parameter value.",
                "explanation": "To handle cases where no argument is provided, use a default parameter value like `name='Guest'`.",
                "chat_context": "The task involves defining a function in Python that greets a user with their name. The issue is related to handling cases where no name is provided to the function. Focus on explaining how default parameters work in Python functions and why they are useful in this context.",
                "reflection_context": "The task involves defining a function in Python that greets a user with their name. The issue is related to handling cases where no name is provided to the function. Focus on explaining how default parameters work in Python functions and why they are useful in this context.",
                "expected_output": "Hello, Guest!"
            }
        ]
    },
    "dictionaries": {
        "label": ["dictionary", "key", "lookup", "`dict`", "error handling", "hash map", "key error", "hash", "hash table", "table"],
        "examples": [
            {
                "task_id": 4,
                "task_description": "You are working with a Python dictionary that stores information about a person, such as their name and age. The goal is to print the value associated with a specific key in the dictionary. However, if the key does not exist, the program should output 'City not found'. The current code raises an error when the key is not found. Your task is to correct the code to handle this situation gracefully by using an appropriate method to avoid the error.",
                "incorrect_code": "my_dict = {'name': 'Alice', 'age': 25}\nprint(my_dict['city'])\n",
                "correct_code": "# Solution 1\nmy_dict = {'name': 'Alice', 'age': 25}\ncity = my_dict.get('city')\nif city:\n    print(city)\nelse:\n    print('City not found')\n",
                "description": "The code raises a KeyError because the key 'city' does not exist in the dictionary.",
                "explanation": "In Python, trying to access a dictionary key that does not exist will raise a KeyError. To avoid this, you can use the `get` method to safely retrieve a key's value. The `get` method returns `None` if the key is not found, which you can then check using an if statement.",
                "chat_context": "The task involves working with dictionaries in Python and handling key errors when a key is not found in the dictionary. The issue is related to KeyError exceptions and how to handle them using the `get` method. Focus on explaining why the incorrect code raises an error and how the correct code addresses this issue.",
                "expected_output": "City not found"
            }
        ]
    },
    "strings":{
        "label": ["string", "concatenation", "`str`", "type error", "concatenate", "combine"],
        "examples": [
            {
                "task_id": 5,
                "task_description": "This task involves concatenating a string and a number in Python to form a complete sentence. The code should take a number representing age and combine it with a string to produce a message like 'I am 25 years old.' However, the current implementation results in an error due to type incompatibility. Your job is to fix the code so that it correctly concatenates the string and number to form the desired output.",
                "incorrect_code": "age = 25\nmessage = 'I am ' + age + ' years old.'\nprint(message)\n",
                "correct_code": "# Solution 1\nage = 25\nmessage = 'I am ' + str(age) + ' years old.'\nprint(message)\n# Solution 2\nage = 25\nmessage = f'I am {age} years old.'\nprint(message)\n",
                "description": "TypeError: cannot concatenate 'str' and 'int' objects.",
                "explanation": "You need to convert the integer to a string before concatenation or use an f-string for formatting.",
                "chat_context": "The task is about concatenating a string and a number in Python. The issue is related to type conversion between integers and strings. Focus on explaining how type conversion works in Python and why the error occurs.",
                "expected_output": "I am 25 years old."
            }
        ]
    },
    "for loops":{
        "label": ["for loop", "`for loop`", "`for`", "for_loop"],
        "examples": [
            {
                "task_id": 6,
                "task_description": "The task requires you to write a `for` loop that iterates over each character in a string and prints it. The current code is supposed to print each character of the string 'hello', but it fails to work correctly due to an indexing issue. Your job is to analyze the code, identify the mistake, and modify it so that it correctly prints each character of the string.",
                "incorrect_code": "word = 'hello'\nfor i in range(0, len(word) + 1):\n    print(word[i])\n",
                "correct_code": "word = 'hello'\nfor i in range(0, len(word)):\n    print(word[i])\n",
                "description": "IndexError: string index out of range.",
                "explanation": "The range should stop at `len(word)`, not `len(word) + 1`, because indexing is zero-based.",
                "chat_context": "The task involves iterating over the characters of a string using a for loop in Python. The issue is related to the range used for iteration and how it relates to string indexing. Focus on explaining why the incorrect code raises an error and how to fix it.",
                "expected_output": "h\ne\nl\nl\no"
            }
        ]
    },
    "while loops":{
        "label": ["while loop", "`while loop`", "`while`", "while_loop"],
        "examples": [
            {
                "task_id": 7,
                "task_description": "This task involves using a `while` loop to print numbers from 1 to 5. The code should iterate through the numbers, printing each one in sequence. However, the current implementation has an issue that causes the loop to run indefinitely. Your task is to identify and fix the problem in the code so that the loop terminates correctly after printing the numbers 1 to 5.",
                "incorrect_code": "i = 1\nwhile i <= 5:\n    print(i)\n",
                "correct_code": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n",
                "description": "The loop condition is correct, but the loop becomes an infinite loop because the increment step is missing.",
                "explanation": "In the incorrect code, the value of `i` is not being incremented inside the loop, causing an infinite loop. To fix this, you need to increment `i` by 1 after each iteration.",
                "chat_context": "The task involves using a while loop to print numbers from 1 to 5 in Python. The issue is related to the loop becoming an infinite loop due to a missing increment step. Focus on explaining why the incorrect code does not terminate and how to correct it.",
                "expected_output": "1\n2\n3\n4\n5"
            }
        ]
    },
    "multiplication":{
        "label": ["multiplication", "*", "multiply", "product"],
        "examples": [
            {
                "task_id": 8,
                "task_description": "In this task, you need to write a function that multiplies two numbers and returns the result. The code should take two input values, multiply them, and return the product. However, the current implementation incorrectly performs addition instead of multiplication. Your task is to correct the code so that it multiplies the numbers as intended.",
                "incorrect_code": "def multiply(a, b):\n    return a + b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "correct_code": "def multiply(a, b):\n    return a * b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "description": "The code is performing addition instead of multiplication.",
                "explanation": "The `+` operator is used for addition, while the `*` operator is used for multiplication.",
                "chat_context": "The task involves multiplying two numbers in Python. The issue is related to using the addition operator instead of the multiplication operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "12"
            }
        ]
    },
    "addition":{
        "label": ["addition", "add", "+", "sum"],
        "examples": [
            {
                "task_id": 9,
                "task_description": "This task requires you to write a function that adds two numbers and returns the result. The code is supposed to take two input values, add them, and return the sum. However, the current implementation mistakenly performs multiplication instead of addition. Your task is to identify and correct the error so that the function correctly adds the numbers.",
                "incorrect_code": "def add(a, b):\n    return a * b\n\nresult = add(3, 4)\nprint(result)\n",
                "correct_code": "def add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)\n",
                "description": "The code is performing multiplication instead of addition.",
                "explanation": "The `*` operator is used for multiplication, while the `+` operator is used for addition.",
                "chat_context": "The task involves adding two numbers in Python. The issue is related to using the multiplication operator instead of the addition operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "7"
            },
            {
                "task_id": 10,
                "task_description": "The task involves performing a simple arithmetic calculation that combines addition and multiplication. The goal is to ensure that addition is performed first, followed by multiplication. However, the current code does not follow the correct order of operations, leading to an incorrect result. Your job is to modify the code to ensure that the calculation is performed in the correct sequence.",
                "incorrect_code": "result = 10 + 5 * 2\nprint(result)\n",
                "correct_code": "result = (10 + 5) * 2\nprint(result)\n",
                "description": "The code is not following the correct order of operations.",
                "explanation": "In Python, multiplication and division have higher precedence than addition and subtraction. To ensure the addition is performed first, use parentheses to group the addition operation.",
                "chat_context": "The task involves a simple arithmetic calculation in Python. The issue is related to the order of operations and how to ensure the addition is performed before multiplication. Focus on explaining why the incorrect code produces the wrong result and how to correct it.",
                "expected_output": "30"
            }
        ]
    },
    "subtraction":{
        "label": ["subtraction", "-", "subtract", "difference"],
        "examples": [
            {
                "task_id": 11,
                "task_description": "You are required to write a function that subtracts one number from another and returns the result. The code should take two input values, subtract the second value from the first, and return the difference. However, the current implementation mistakenly performs multiplication instead of subtraction. Your task is to correct the code so that it performs the subtraction as intended.",
                "incorrect_code": "def subtract(a, b):\n    return a * b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "correct_code": "def subtract(a, b):\n    return a - b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "description": "The code is performing multiplication instead of subtraction.",
                "explanation": "The `*` operator is used for multiplication, while the `-` operator is used for subtraction.",
                "chat_context": "The task involves subtracting two numbers in Python. The issue is related to using the multiplication operator instead of the subtraction operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "4"
            }
        ]
    },
    "division":{
        "label": ["division", "divide", "/", "quotient"],
        "examples": [
            {
                "task_id": 12,
                "task_description": "In this task, you need to write a function that divides two numbers and returns the result. The code should take two input values, divide the first value by the second, and return the quotient. However, the current implementation incorrectly performs addition instead of division. Your job is to fix the code so that it correctly divides the numbers and returns the expected result.",
                "incorrect_code": "def divide(a, b):\n    return a + b\n\nresult = divide(10, 2)\nprint(result)\n",
                "correct_code": "def divide(a, b):\n    return a / b\n\nresult = divide(10, 2)\nprint(result)\n",
                "description": "The code is performing addition instead of division.",
                "explanation": "The `+` operator is used for addition, while the `/` operator is used for division.",
                "chat_context": "The task involves dividing two numbers in Python. The issue is related to using the addition operator instead of the division operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "5.0"
            }
        ]
    },
    "modulus":{
        "label": ["modulus", "remainder", "%", "modulo"],
        "examples": [
            {
                "task_id": 13,
                "task_description": "This task involves writing a function that calculates the remainder when one number is divided by another. The code should take two input values, find the remainder of their division, and return the result. However, the current implementation mistakenly performs division instead of finding the remainder. Your task is to correct the code so that it uses the modulus operator to return the correct remainder.",
                "incorrect_code": "def find_remainder(a, b):\n    return a / b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "correct_code": "def find_remainder(a, b):\n    return a % b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "description": "The code is performing division instead of finding the remainder.",
                "explanation": "The `/` operator is used for division, while the `%` operator is used to find the remainder of division.",
                "chat_context": "The task involves finding the remainder of dividing two numbers in Python. The issue is related to using the division operator instead of the modulus operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "1"
            }
        ]
    },
    "mathematics":{
        "label": ["mathematics", "math", "calculation", "arithmetic"],
        "examples": [
            {
                "task_id": 14,
                "task_description": "This task involves performing a simple arithmetic calculation that combines addition and multiplication. The goal is to ensure that addition is performed first, followed by multiplication. However, the current code does not follow the correct order of operations, leading to an incorrect result. Your job is to modify the code to ensure that the calculation is performed in the correct sequence.",
                "incorrect_code": "result = 10 + 5 * 2\nprint(result)\n",
                "correct_code": "result = (10 + 5) * 2\nprint(result)\n",
                "description": "The code is not following the correct order of operations.",
                "explanation": "In Python, multiplication and division have higher precedence than addition and subtraction. To ensure the addition is performed first, use parentheses to group the addition operation.",
                "chat_context": "The task involves a simple arithmetic calculation in Python. The issue is related to the order of operations and how to ensure the addition is performed before multiplication. Focus on explaining why the incorrect code produces the wrong result and how to correct it.",
                "expected_output": "30"
            },
            {
                "task_id": 15,
                "task_description": "You need to write a function that calculates the remainder when one number is divided by another. The code should take two input values, find the remainder of their division, and return the result. However, the current implementation mistakenly performs division instead of finding the remainder. Your task is to correct the code so that it uses the modulus operator to return the correct remainder.",
                "incorrect_code": "def find_remainder(a, b):\n    return a / b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "correct_code": "def find_remainder(a, b):\n    return a % b\n\nresult = find_remainder(10, 3)\nprint(result)\n",
                "description": "The code is performing division instead of finding the remainder.",
                "explanation": "The `/` operator is used for division, while the `%` operator is used to find the remainder of division.",
                "chat_context": "The task involves finding the remainder of dividing two numbers in Python. The issue is related to using the division operator instead of the modulus operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "1"
            },
            {
                "task_id": 16,
                "task_description": "In this task, you need to write a function that divides two numbers and returns the result. The code should take two input values, divide the first value by the second, and return the quotient. However, the current implementation incorrectly performs addition instead of division. Your job is to fix the code so that it correctly divides the numbers and returns the expected result.",
                "incorrect_code": "def divide(a, b):\n    return a + b\n\nresult = divide(10, 2)\nprint(result)\n",
                "correct_code": "def divide(a, b):\n    return a / b\n\nresult = divide(10, 2)\nprint(result)\n",
                "description": "The code is performing addition instead of division.",
                "explanation": "The `+` operator is used for addition, while the `/` operator is used for division.",
                "chat_context": "The task involves dividing two numbers in Python. The issue is related to using the addition operator instead of the division operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "5.0"
            },
            {
                "task_id": 17,
                "task_description": "You are required to write a function that subtracts one number from another and returns the result. The code should take two input values, subtract the second value from the first, and return the difference. However, the current implementation mistakenly performs multiplication instead of subtraction. Your task is to correct the code so that it performs the subtraction as intended.",
                "incorrect_code": "def subtract(a, b):\n    return a * b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "correct_code": "def subtract(a, b):\n    return a - b\n\nresult = subtract(7, 3)\nprint(result)\n",
                "description": "The code is performing multiplication instead of subtraction.",
                "explanation": "The `*` operator is used for multiplication, while the `-` operator is used for subtraction.",
                "chat_context": "The task involves subtracting two numbers in Python. The issue is related to using the multiplication operator instead of the subtraction operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "4"
            },
            {
                "task_id": 18,
                "task_description": "This task requires you to write a function that adds two numbers and returns the result. The code is supposed to take two input values, add them, and return the sum. However, the current implementation mistakenly performs multiplication instead of addition. Your task is to identify and correct the error so that the function correctly adds the numbers.",
                "incorrect_code": "def add(a, b):\n    return a * b\n\nresult = add(3, 4)\nprint(result)\n",
                "correct_code": "def add(a, b):\n    return a + b\n\nresult = add(3, 4)\nprint(result)\n",
                "description": "The code is performing multiplication instead of addition.",
                "explanation": "The `*` operator is used for multiplication, while the `+` operator is used for addition.",
                "chat_context": "The task involves adding two numbers in Python. The issue is related to using the multiplication operator instead of the addition operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "7"
            },
            {
                "task_id": 19,
                "task_description": "In this task, you need to write a function that multiplies two numbers and returns the result. The code should take two input values, multiply them, and return the product. However, the current implementation incorrectly performs addition instead of multiplication. Your task is to correct the code so that it multiplies the numbers as intended.",
                "incorrect_code": "def multiply(a, b):\n    return a + b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "correct_code": "def multiply(a, b):\n    return a * b\n\nresult = multiply(3, 4)\nprint(result)\n",
                "description": "The code is performing addition instead of multiplication.",
                "explanation": "The `+` operator is used for addition, while the `*` operator is used for multiplication.",
                "chat_context": "The task involves multiplying two numbers in Python. The issue is related to using the addition operator instead of the multiplication operator. Focus on explaining why the incorrect code produces the wrong result and how to fix it.",
                "expected_output": "12"
            }
        ]
    },
    "if statements":{
        "label": ["if", "if statement", "if_statement", "`if`", "if_statements"],
        "examples": [
            {
                "task_id": 20,
                "task_description": "This task involves using an if statement to check whether a given number is even or odd. The code is supposed to evaluate the condition and print 'Even' if the number is even, and 'Odd' if the number is odd. However, the current implementation has a syntax error due to incorrect use of the comparison operator. Your task is to fix the code so that it correctly identifies and prints whether the number is even or odd.",
                "incorrect_code": "num = 4\nif num % 2 = 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "correct_code": "num = 4\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "description": "Using a single equals sign for comparison instead of a double equals sign.",
                "explanation": "In Python, a single equals sign `=` is used for assignment, while a double equals sign `==` is used for comparison. The incorrect code uses `=` for comparison, which results in a syntax error. The correct code uses `==` to properly compare if `num % 2` is equal to `0`.",
                "chat_context": "The task involves using if statements to check if a number is even or odd in Python. The common mistake here is using a single equals sign for comparison instead of a double equals sign. Focus on explaining the difference between assignment and comparison operators and how to correctly use them in if statements.",
                "expected_output": "Even"
            },
            {
                "task_id": 21,
                "task_description": "In this task, you need to write code that checks if a number is positive, negative, or zero using if, elif, and else statements. The code is supposed to evaluate the number and print the corresponding message based on its value. However, the current implementation has syntax errors due to missing colons at the end of the conditional statements. Your task is to correct the syntax so that the code works as intended.",
                "incorrect_code": "num = 3\nif num > 0\n    print('Positive')\nelif num < 0\n    print('Negative')\nelse\n    print('Zero')\n",
                "correct_code": "num = 3\nif num > 0:\n    print('Positive')\nelif num < 0:\n    print('Negative')\nelse:\n    print('Zero')\n",
                "description": "Forgetting to include the colon at the end of the if, elif, and else statements.",
                "explanation": "In Python, each `if`, `elif`, and `else` statement must end with a colon (`:`). The incorrect code is missing colons, which results in a syntax error. The correct code includes colons at the end of each conditional statement.",
                "chat_context": "The task involves using if statements to check if a number is positive, negative, or zero in Python. The common mistake here is forgetting to include the colon at the end of the if, elif, and else statements. Focus on explaining the importance of the colon in Python's syntax for conditional statements.",
                "expected_output": "Positive"
            }
        ]
    },
    "condtionals":{
        "label": ["conditionals", "conditional", "condition", "conditional statement", "conditional_statement", "conditional_statement", "conditional_statements"],
        "examples": [
            {
                "task_id": 21,
                "task_description": "This task involves using a conditional statement to determine if a number is even or odd in Python. The code provided is correct and should print 'Even' if the number is divisible by 2 and 'Odd' otherwise. However, the task description may be misleading. Focus on understanding why the code works as expected and how the conditional statement accurately determines whether a number is even or odd.",
                "incorrect_code": "num = 5\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "correct_code": "num = 5\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
                "description": "The code is correct, but the description is misleading.",
                "explanation": "The code correctly checks if a number is even or odd based on the remainder of division by 2.",
                "chat_context": "The task involves using conditionals to check if a number is even or odd in Python. The code provided is correct, but the description is misleading. Focus on explaining why the code works as expected and how the conditional statement determines if a number is even or odd.",
                "expected_output": "Odd"
            }
        ]
    }
}