[
    {
        "instruction": "Write a Python function that calculates the total number of cakes shared among all guests at a birthday party with 30 guests. The input to the function is the number of cakes brought by each guest, and the output should be the total number of cakes shared between all guests.\n\n\nWrite a Python function that calculates the total number of cakes shared among all guests at a birthday party with 30 guests. The input to the function is the number of cakes brought by each guest, and the output should be the total number of cakes shared between all guests.\n\nThe number of guests at the party is fixed at 30. Each guest brings a specific number of cakes as their contribution to the celebration. The function's purpose is to calculate the total number of cakes contributed by all guests and the total number of cakes shared among them. The output should be displayed in two columns, with each column displaying either \"Cakes Brought\" or \"Cakes Shared\".\n\nThe code should include a variable to represent the number of guests at the party (in this case 30) and another variable for the number of cakes brought by each guest. The function should use a loop to iterate over each guest and calculate the total number of cakes contributed by all guests. The output should be displayed as two columns, with each column displaying either \"Cakes Brought\" or \"Cakes Shared\"."
    },
    {
        "instruction": "Check if answer is even: Write Python code to check if the number is divisible by 2 and print \"Even\" or \"Odd\"."
    },
    {
        "instruction": "You have been hired as a data analyst at a car manufacturing company and are tasked with arranging the sales figures for different types of cars in descending order. You will use Python to sort 10 numbers, representing the number of cars sold for each type of car, in descending order (i.e., highest number first).\n\nTo solve this problem, you can use a sorting algorithm like the Bubble Sort or Insertion Sort. However, since your input consists of just 10 elements and they are already sorted in ascending order, it is not necessary to use a complex algorithm like Quicksort. Instead, you can simply loop through the list and swap adjacent elements if they are out of order.\n\nHere's an example code snippet that uses Bubble Sort to sort the input:\n```\n# Input\nnumbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Bubble Sort\ndef bubbleSort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[j] < numbers[i]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers\n\n# Output\nsorted_numbers = bubbleSort(numbers)\nprint(sorted_numbers)\n```\nThe output will be a list of 10 elements sorted in descending order (i.e., highest number first):\n```\n[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n```"
    }
]